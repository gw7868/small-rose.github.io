<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>不同类型数据库字段类型和JAVA类型、sql类型对应关系</title>
    <url>/posts/dc390855.html</url>
    <content><![CDATA[<p>不同类型数据库字段类型和JAVA类型、sql类型对应关系。</p>
<a id="more"></a>

<p><img src="/medias/loading-animated.gif" data-original="/images/db_jdbcType.jpg" alt="Image text"></p>
]]></content>
      <categories>
        <category>Java,DataBase</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos相关配置</title>
    <url>/posts/42e4f857.html</url>
    <content><![CDATA[<p> Centos网络配置 | Centos时间配置 | DNS解析问题</p>
<a id="more"></a>

<h2 id="Centos各种配置"><a href="#Centos各种配置" class="headerlink" title="Centos各种配置"></a>Centos各种配置</h2><h2 id="1-Centos网络配置"><a href="#1-Centos网络配置" class="headerlink" title="1.Centos网络配置"></a>1.Centos网络配置</h2><h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p>有图形界面可以直接界面操作，没有界面可以参考一下：<br>（1）修改配置</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /etc/sysconfig/network-scripts/</code></pre>
<p>修改对应网卡的配置，可以ifconfig看看用的网卡名。<br>修改相关配置：</p>
<pre><code>TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=ens192
UUID=64e7784d-8183-4db5-af4c-120203391708
DEVICE=ens192
ONBOOT=yes
IPADDR=192.168.66.80
PREFIX=24
GATEWAY=192.168.66.254
IPV6_PRIVACY=no</code></pre><p>（2）重启网络服务</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> network restart</code></pre>
<h2 id="2-Centos时间配置"><a href="#2-Centos时间配置" class="headerlink" title="2.Centos时间配置"></a>2.Centos时间配置</h2><p>设置时区同样,在 CentOS 7 中, 引入了一个叫 timedatectl 的设置设置程序.<br>用法很简单:<code>timedatectl # 查看系统时间方面的各种状态</code></p>
<pre><code>      Local time: 四 2014-12-25 10:52:10 CST
  Universal time: 四 2014-12-25 02:52:10 UTC
        RTC time: 四 2014-12-25 02:52:10
        Timezone: Asia/Shanghai (CST, +0800)
     NTP enabled: yes
NTP synchronized: yes
 RTC in local TZ: no
      DST active: n/a</code></pre><h4 id="列出所有时区"><a href="#列出所有时区" class="headerlink" title="列出所有时区"></a>列出所有时区</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl list-timezones </code></pre>
<h4 id="将硬件时钟调整为与本地时钟一致-0-为设置为-UTC-时间"><a href="#将硬件时钟调整为与本地时钟一致-0-为设置为-UTC-时间" class="headerlink" title="将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间"></a>将硬件时钟调整为与本地时钟一致, 0 为设置为 UTC 时间</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl set-local-rtc 1 </code></pre>
<h4 id="设置系统时区为上海"><a href="#设置系统时区为上海" class="headerlink" title="设置系统时区为上海"></a>设置系统时区为上海</h4><pre class=" language-bash"><code class="language-bash">$ timedatectl set-timezone Asia/Shanghai </code></pre>
<h4 id="直接修改时间时区"><a href="#直接修改时间时区" class="headerlink" title="直接修改时间时区"></a>直接修改时间时区</h4><p>其实不考虑各个发行版的差异化, 从更底层出发的话, 直接修改时间时区:</p>
<pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre>
<h2 id="3-DNS解析问题"><a href="#3-DNS解析问题" class="headerlink" title="3.DNS解析问题"></a>3.DNS解析问题</h2><p>ping IP可以 ping 域名不通的时候</p>
<pre class=" language-bash"><code class="language-bash">$ vim /etc/resolve.conf</code></pre>
<p>增加：</p>
<pre><code>nameserver 8.8.8.8
nameserver 8.8.4.4</code></pre>]]></content>
      <categories>
        <category>Linux,centos</category>
      </categories>
      <tags>
        <tag>centos配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos-jdk安装配置环境变量</title>
    <url>/posts/9064540a.html</url>
    <content><![CDATA[<p> Centos上安装jdk，配置环境变量的方法</p>
<a id="more"></a>
<h2 id="Centos上jdk配置"><a href="#Centos上jdk配置" class="headerlink" title="Centos上jdk配置"></a>Centos上jdk配置</h2><p>[TOC]</p>
<h2 id="1-检查环境"><a href="#1-检查环境" class="headerlink" title="1.检查环境"></a>1.检查环境</h2><p>查看java版本</p>
<pre class=" language-bash"><code class="language-bash">java -version</code></pre>
<p> 检查是否已经安装jdk，通常默认自认openjdk</p>
<pre class=" language-bash"><code class="language-bash">java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64
java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64
java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64
java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre>
<p> 如果要卸载,需要root用户权限才可以执行：</p>
<pre class=" language-bash"><code class="language-bash">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64
rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64
rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64
rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</code></pre>
<p>再次查看java版本，如提示未找到命令则删除成功。</p>
<h2 id="2-上传jdk安装文件"><a href="#2-上传jdk安装文件" class="headerlink" title="2.上传jdk安装文件"></a>2.上传jdk安装文件</h2><h4 id="上传方法"><a href="#上传方法" class="headerlink" title="上传方法"></a>上传方法</h4><p>（1）可以联网直接下载即可<br>（2）ssh可以安装用rz/sz上传下载<br>（3）ftp自行安装ftp服务，关于安装教程可到：</p>
<p>上传jdk-7u80-linux-x64.tar.gz到你的目录后，<br>解压后移动到 <code>/usr/jdk1.7.0_80</code></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-7u80-linux-x64.tar.gz
<span class="token function">cp</span>  jdk-7u80 /usr/jdk1.7.0_80</code></pre>
<p>【关于解压命令大全可以移步：】</p>
<h2 id="2-配置关变量"><a href="#2-配置关变量" class="headerlink" title="2.配置关变量"></a>2.配置关变量</h2><p>/etc/profile全局变量配置</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/profile</code></pre>
<p>.bash_profile为root用户的环境变量。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /root/
<span class="token function">ls</span> -a
<span class="token function">vi</span> .bash_profile</code></pre>
<p>二者均可，建议修改用户环境变量。<br>在文件末尾增加java环境变量即可,听说CentOS6上面的是JAVAHOME，CentOS7是{JAVA_HOME}</p>
<pre><code># .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

# User specific environment and startup programs

export JAVA_HOME=/usr/jdk1.7.0_80
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

export PATH</code></pre><h2 id="3-让刚刚设置的环境变量生效"><a href="#3-让刚刚设置的环境变量生效" class="headerlink" title="3.让刚刚设置的环境变量生效"></a>3.让刚刚设置的环境变量生效</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre>
<p>或者</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> .bash_profile</code></pre>
<h2 id="4-再次验证是否配置成功"><a href="#4-再次验证是否配置成功" class="headerlink" title="4.再次验证是否配置成功"></a>4.再次验证是否配置成功</h2><pre class=" language-bash"><code class="language-bash">java -version</code></pre>
<p>出现java版本号代表安装成功。</p>
]]></content>
      <categories>
        <category>Linux,Java</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>js让页面自动刷新</title>
    <url>/posts/7413f2ca.html</url>
    <content><![CDATA[<p>js让页面自动刷新</p>
<a id="more"></a>

<h6 id="想让页面自动刷新"><a href="#想让页面自动刷新" class="headerlink" title="想让页面自动刷新?"></a>想让页面自动刷新?</h6><p>F12 —– 控制台 —– 使用下面代码，OK。</p>
<pre class=" language-javascript"><code class="language-javascript">timeout<span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"Set timeout (Second):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token operator">=</span><span class="token number">0</span>
current<span class="token operator">=</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>timeout<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'reload()'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'reload()'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'每（'</span><span class="token operator">+</span>timeout<span class="token operator">+</span><span class="token string">'）秒自动刷新,刷新次数：'</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
fr4me<span class="token operator">=</span><span class="token string">'&lt;frameset cols=\'*\'>\n&lt;frame src=\''</span><span class="token operator">+</span>current<span class="token operator">+</span><span class="token string">'\'/>'</span><span class="token punctuation">;</span>
fr4me<span class="token operator">+</span><span class="token operator">=</span><span class="token string">'&lt;/frameset>'</span><span class="token punctuation">;</span>
<span class="token keyword">with</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">write</span><span class="token punctuation">(</span>fr4me<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java,DataBase</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的SSH免密使用</title>
    <url>/posts/c68d7a69.html</url>
    <content><![CDATA[<pre><code>本文记录关于Git的免密使用，连接Github免密和 云服务器或私有服务器免密。</code></pre><h3 id="一-Github的Git免密使用"><a href="#一-Github的Git免密使用" class="headerlink" title="一  Github的Git免密使用"></a>一  <code>Github</code>的Git免密使用</h3><h4 id="1-客户端生成密钥"><a href="#1-客户端生成密钥" class="headerlink" title="1 客户端生成密钥"></a>1 客户端生成密钥</h4><pre><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></pre><p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><h4 id="2-Github配置SSH公钥"><a href="#2-Github配置SSH公钥" class="headerlink" title="2  Github配置SSH公钥"></a>2  <code>Github</code>配置SSH公钥</h4><p> 登录git账户，<code>Setting</code>，<code>SSH and GPG keys</code>, <code>New ssh key</code></p>
<p>把<code>id_rsa.pub</code>的内容粘贴到key的文本域，点击<code>Add SSH key</code>完成。</p>
<p>后续的客户端git操作就不要密码了。</p>
<h3 id="二-Git服务器配置SSH免密"><a href="#二-Git服务器配置SSH免密" class="headerlink" title="二 Git服务器配置SSH免密"></a>二 <code>Git</code>服务器配置SSH免密</h3><p>注意：这里的Git服务器可以是云服务器或者自己的私服务器。本次操作环境是<code>Centos 7</code>。</p>
<h4 id="1-客户端生成密钥-1"><a href="#1-客户端生成密钥-1" class="headerlink" title="1 客户端生成密钥"></a>1 客户端生成密钥</h4><p>注意：同上，如果已经配置过<code>Github</code>的ssh免密上面已经有了可以不用重复生成，可以直接跳到第二步。</p>
<pre><code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code></pre><p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><h4 id="2-服务端导入客户端公钥"><a href="#2-服务端导入客户端公钥" class="headerlink" title="2  服务端导入客户端公钥"></a>2  服务端导入客户端公钥</h4><p>在/home/git下已经创建.ssh目录，然后创建authorized_keys文件，并将客户端生成的公钥导入进去。</p>
<pre><code>cd /home/git/
mkdir .ssh
chmod 755 .ssh
touch .ssh/authorized_keys
chmod 644 .ssh/authorized_keys</code></pre><p>将 <code>id_rsa.pub</code> 文件的内容写入<code>authorized_keys</code></p>
<h4 id="3-服务端SSH开启RSA认证"><a href="#3-服务端SSH开启RSA认证" class="headerlink" title="3  服务端SSH开启RSA认证"></a>3  服务端<code>SSH</code>开启<code>RSA</code>认证</h4><p>如果没有安装SSH服务，请先安装SSH服务。</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/ssh/sshd_config</code></pre>
<p>其中三个地方的设置要确认如下：</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys</code></pre><p>git用户不允许登录shell</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/passwd</code></pre>
<p>将</p>
<pre><code>git:x:502:502::/home/git:/bin/bash</code></pre><p> 改为</p>
<pre><code>git:x:502:502::/home/git:/usr/local/git/bin/git-shell</code></pre>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
        <tag>SSH免密</tag>
        <tag>云服务器</tag>
        <tag>私有服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>开发常用的网站收藏列表</title>
    <url>/posts/2d1a17c5.html</url>
    <content><![CDATA[<h4 id="API在线"><a href="#API在线" class="headerlink" title="API在线"></a>API在线</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>常用API文档索引</td>
<td><a href="https://tool.oschina.net/apidocs" target="_blank" rel="noopener">https://tool.oschina.net/apidocs</a></td>
</tr>
<tr>
<td>java8 API</td>
<td><a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">https://www.matools.com/api/java8</a></td>
</tr>
<tr>
<td>dubbo API</td>
<td><a href="http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/user/configuration/api.html</a></td>
</tr>
</tbody></table>
<h4 id="开源网站"><a href="#开源网站" class="headerlink" title="开源网站"></a>开源网站</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>github网站</td>
<td><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></td>
</tr>
<tr>
<td>码云</td>
<td><a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></td>
</tr>
<tr>
<td>一起开源官网</td>
<td><a href="http://www.17ky.net/" target="_blank" rel="noopener">http://www.17ky.net/</a></td>
</tr>
<tr>
<td>Open JDK</td>
<td><a href="http://openjdk.java.net/" target="_blank" rel="noopener">http://openjdk.java.net/</a></td>
</tr>
<tr>
<td>Open JDK  HotSpot</td>
<td><a href="https://wiki.openjdk.java.net/display/HotSpot/Main" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/HotSpot/Main</a></td>
</tr>
</tbody></table>
<h4 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>JAVA官网</td>
<td><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></td>
</tr>
<tr>
<td>ECLIPSE官网</td>
<td><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">https://www.eclipse.org/downloads/</a></td>
</tr>
<tr>
<td>IntelliJ IDEA</td>
<td><a href="http://www.jetbrains.com/" target="_blank" rel="noopener">http://www.jetbrains.com/</a></td>
</tr>
<tr>
<td>springtoolsuite</td>
<td><a href="https://spring.io/tools" target="_blank" rel="noopener">https://spring.io/tools</a></td>
</tr>
<tr>
<td>Python官网</td>
<td><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></td>
</tr>
<tr>
<td>Maven官网</td>
<td><a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></td>
</tr>
<tr>
<td>Maven仓库</td>
<td><a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></td>
</tr>
<tr>
<td>Nexus官网</td>
<td><a href="https://www.nexusmods.com/" target="_blank" rel="noopener">https://www.nexusmods.com/</a></td>
</tr>
<tr>
<td>Ant官网</td>
<td><a href="https://ant.apache.org/" target="_blank" rel="noopener">https://ant.apache.org/</a></td>
</tr>
<tr>
<td>SVN官网</td>
<td><a href="https://tortoisesvn.net/" target="_blank" rel="noopener">https://tortoisesvn.net/</a></td>
</tr>
<tr>
<td>Git官网</td>
<td><a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></td>
</tr>
<tr>
<td>Spring官网</td>
<td><a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></td>
</tr>
</tbody></table>
<h4 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>APACHE官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Tomcat官网</td>
<td><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></td>
</tr>
<tr>
<td>Nginx官网</td>
<td><a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>Dubbo官网</td>
<td><a href="http://dubbo.apache.org/zh-cn/" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/</a></td>
</tr>
<tr>
<td>Zookeeper</td>
<td><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></td>
</tr>
<tr>
<td>netty</td>
<td><a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a></td>
</tr>
<tr>
<td>jetty</td>
<td><a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener">http://www.eclipse.org/jetty/</a></td>
</tr>
</tbody></table>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Linux</td>
<td><a href="https://www.linux.org/" target="_blank" rel="noopener">https://www.linux.org/</a></td>
</tr>
<tr>
<td>Linux开源社区</td>
<td><a href="https://linux.cn/" target="_blank" rel="noopener">https://linux.cn/</a></td>
</tr>
<tr>
<td>Linux公社</td>
<td><a href="https://www.linuxidc.com/" target="_blank" rel="noopener">https://www.linuxidc.com/</a></td>
</tr>
</tbody></table>
<h4 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Mysql官网</td>
<td><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></td>
</tr>
<tr>
<td>SQL SERVER官网</td>
<td><a href="https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads</a></td>
</tr>
<tr>
<td>ORICLE官网</td>
<td><a href="https://www.oracle.com/downloads/" target="_blank" rel="noopener">https://www.oracle.com/downloads/</a></td>
</tr>
<tr>
<td>DB2官网</td>
<td><a href="https://www.ibm.com/analytics/cn/zh/technology/db2/" target="_blank" rel="noopener">https://www.ibm.com/analytics/cn/zh/technology/db2/</a></td>
</tr>
<tr>
<td>TOAD官网</td>
<td><a href="https://www.toadworld.com/" target="_blank" rel="noopener">https://www.toadworld.com/</a></td>
</tr>
<tr>
<td>Navicat官网</td>
<td><a href="https://www.navicat.com.cn/" target="_blank" rel="noopener">https://www.navicat.com.cn/</a></td>
</tr>
<tr>
<td>DataGrip官网</td>
<td><a href="https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html" target="_blank" rel="noopener">https://www.jetbrains.com/zh/datagrip/specials/datagrip/datagrip.html</a></td>
</tr>
<tr>
<td>Redis官网</td>
<td><a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></td>
</tr>
<tr>
<td>Redis中文网</td>
<td><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></td>
</tr>
<tr>
<td>MongoDB官网</td>
<td><a href="https://www.mongodb.com/Nginx" target="_blank" rel="noopener">https://www.mongodb.com/Nginx</a>  <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></td>
</tr>
<tr>
<td>UML工具列表</td>
<td><a href="http://www.umlchina.com/Tools/Newindex1.htm" target="_blank" rel="noopener">http://www.umlchina.com/Tools/Newindex1.htm</a></td>
</tr>
</tbody></table>
<h4 id="前端相关"><a href="#前端相关" class="headerlink" title="前端相关"></a>前端相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>w3school官网</td>
<td><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a></td>
</tr>
<tr>
<td>jQuery官网</td>
<td><a href="https://jquery.com/" target="_blank" rel="noopener">https://jquery.com/</a></td>
</tr>
<tr>
<td>jQuery api   非官网:</td>
<td><a href="http://jquery.cuishifeng.cn/" target="_blank" rel="noopener">http://jquery.cuishifeng.cn/</a></td>
</tr>
<tr>
<td>easyui官网</td>
<td><a href="http://www.jeasyui.net/" target="_blank" rel="noopener">http://www.jeasyui.net/</a></td>
</tr>
<tr>
<td>Bootstrap官网</td>
<td><a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></td>
</tr>
<tr>
<td>Amaze ~ 妹子 UI官网:</td>
<td><a href="http://amazeui.org/" target="_blank" rel="noopener">http://amazeui.org/</a></td>
</tr>
<tr>
<td>React</td>
<td><a href="https://react.docschina.org/" target="_blank" rel="noopener">https://react.docschina.org/</a></td>
</tr>
<tr>
<td>NOWA</td>
<td><a href="https://nowa-webpack.github.io/" target="_blank" rel="noopener">https://nowa-webpack.github.io/</a></td>
</tr>
<tr>
<td>Vue官网:</td>
<td><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></td>
</tr>
<tr>
<td>AngularJS中文网</td>
<td><a href="https://www.angularjs.net.cn/" target="_blank" rel="noopener">https://www.angularjs.net.cn/</a></td>
</tr>
<tr>
<td>开源图标库</td>
<td><a href="https://remixicon.com/" target="_blank" rel="noopener">https://remixicon.com/</a></td>
</tr>
<tr>
<td>开源图标库预览</td>
<td><a href="https://lvyueyang.gitee.io/remixicon/" target="_blank" rel="noopener">https://lvyueyang.gitee.io/remixicon/</a></td>
</tr>
</tbody></table>
<h4 id="远程或传输"><a href="#远程或传输" class="headerlink" title="远程或传输"></a>远程或传输</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>SecureCRT官网</td>
<td><a href="https://www.vandyke.com/products/securecrt/" target="_blank" rel="noopener">https://www.vandyke.com/products/securecrt/</a></td>
</tr>
<tr>
<td>XSHELL官网</td>
<td><a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a></td>
</tr>
<tr>
<td>WinSCP官网</td>
<td><a href="https://winscp.net/eng/docs/lang:chs" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:chs</a></td>
</tr>
<tr>
<td>File-Zilla官网</td>
<td><a href="https://filezilla-project.org/" target="_blank" rel="noopener">https://filezilla-project.org/</a></td>
</tr>
<tr>
<td>File-Zilla中文网</td>
<td><a href="https://www.filezilla.cn/" target="_blank" rel="noopener">https://www.filezilla.cn/</a></td>
</tr>
<tr>
<td>flashfxp官网</td>
<td><a href="https://www.flashfxp.com/" target="_blank" rel="noopener">https://www.flashfxp.com/</a></td>
</tr>
</tbody></table>
<h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>7z</td>
<td><a href="https://www.7-zip.org/" target="_blank" rel="noopener">https://www.7-zip.org/</a></td>
</tr>
<tr>
<td>WINRAR官网</td>
<td><a href="http://www.winrar.com.cn/" target="_blank" rel="noopener">http://www.winrar.com.cn/</a></td>
</tr>
<tr>
<td>在线工具箱</td>
<td><a href="https://tool.lu/" target="_blank" rel="noopener">https://tool.lu/</a></td>
</tr>
<tr>
<td>DeskTopShare</td>
<td><a href="http://www.yinrg.net/" target="_blank" rel="noopener">http://www.yinrg.net/</a></td>
</tr>
</tbody></table>
<h4 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>图片压缩TinyPNG</td>
<td><a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></td>
</tr>
<tr>
<td>图片去背景</td>
<td><a href="http://www.aigei.com/bgremover/" target="_blank" rel="noopener">http://www.aigei.com/bgremover/</a></td>
</tr>
</tbody></table>
<h4 id="图床工具："><a href="#图床工具：" class="headerlink" title="图床工具："></a>图床工具：</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>PicGo</td>
<td><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></td>
</tr>
<tr>
<td>MPic-图床神器</td>
<td><a href="http://mpic.lzhaofu.cn" target="_blank" rel="noopener">http://mpic.lzhaofu.cn</a></td>
</tr>
<tr>
<td>PicPlus -手机图床</td>
<td><a href="https://www.coolapk.com/apk/name.gudong.pic" target="_blank" rel="noopener">https://www.coolapk.com/apk/name.gudong.pic</a></td>
</tr>
</tbody></table>
<h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>open jdk相关</td>
<td><a href="https://www.iteye.com/blog/user/rednaxelafx" target="_blank" rel="noopener">https://www.iteye.com/blog/user/rednaxelafx</a></td>
</tr>
</tbody></table>
<h4 id="XML相关"><a href="#XML相关" class="headerlink" title="XML相关"></a>XML相关</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>Castor实现XML与Java的互转</td>
<td><a href="http://www.castor.org/" target="_blank" rel="noopener">http://www.castor.org/</a></td>
</tr>
</tbody></table>
<!--  JDK6JAXB2来实现对象与XML之间的映射  -->

<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>quartz</td>
<td><a href="https://www.w3cschool.cn/quartz_doc/" target="_blank" rel="noopener">https://www.w3cschool.cn/quartz_doc/</a></td>
</tr>
<tr>
<td>viewerjs，PDF/office在线预览</td>
<td><a href="https://fengyuanchen.github.io/viewerjs/" target="_blank" rel="noopener">https://fengyuanchen.github.io/viewerjs/</a></td>
</tr>
</tbody></table>
<h4 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h4><table>
<thead>
<tr>
<th>网站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>mkdown在线编辑器</td>
<td><a href="http://www.mdeditor.com/" target="_blank" rel="noopener">http://www.mdeditor.com/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="http://mahua.jser.me/" target="_blank" rel="noopener">http://mahua.jser.me/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://tool.lu/markdown/" target="_blank" rel="noopener">https://tool.lu/markdown/</a></td>
</tr>
<tr>
<td>mkdown在线编辑器</td>
<td><a href="https://dillinger.io/" target="_blank" rel="noopener">https://dillinger.io/</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>收藏资源</category>
      </categories>
      <tags>
        <tag>开发常用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（二）——创建页面</title>
    <url>/posts/c1358fc8.html</url>
    <content><![CDATA[<p>本文记录将hexo博客创建页面相关操作操作。</p>
<a id="more"></a>

<p>作者：阿兰那</p>
<h2 id="1-创建链接页面的基本命令"><a href="#1-创建链接页面的基本命令" class="headerlink" title="1.创建链接页面的基本命令"></a>1.创建链接页面的基本命令</h2><font color=red>
```
hexo new page  yourpagename
```
</font>

<h4 id="2-创建about页面"><a href="#2-创建about页面" class="headerlink" title="2.创建about页面"></a>2.创建about页面</h4><pre><code>hexo new page about</code></pre><p>修改source/about/index.md文件即可。文件内可以使用markdown或html语法。</p>
<h4 id="3-创建分类"><a href="#3-创建分类" class="headerlink" title="3.创建分类"></a>3.创建分类</h4><pre><code>hexo new page categories   //创建分类</code></pre><p>修改source/categories/index.md文件即可.<br>补充红色字体内容： <font color=red><code>type: &quot;categories&quot;</code></font></p>
<pre><code>---
title: categories
date: 2020-05-14 21:51:42
type: categories
---</code></pre><p>那么在写文章的时候就可以在头部使用分类了，如：</p>
<pre><code>---
title: Hexo搭建静态博客及踩坑问题
date: 2020-05-13
categories: Hexo
---
 this is my article ...
</code></pre><h4 id="4-创建标签"><a href="#4-创建标签" class="headerlink" title="4.创建标签"></a>4.创建标签</h4><pre><code>hexo new page tags         //创建标签</code></pre><p>修改source/tags/index.md文件即可:<br>补充红色字体内容： <font color=red><code>type: &quot;tags&quot;</code></font></p>
<pre><code>---
title: tags
date: 2020-05-14 21:51:42
type: tags
---</code></pre><p>那么在写文章的时候就可以在头部使用标签了，如：</p>
<pre><code>---
title: Hexo搭建静态博客及踩坑问题
date: 2020-05-13
categories: Hexo
tags: Hexo
---
 this is my article ...
</code></pre><p>是不是很简单呢？</p>
<p>如有问题请参考本系列：Hexo搭建静态博客（五）——踩坑问题</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（一）——基础搭建</title>
    <url>/posts/9f117b.html</url>
    <content><![CDATA[<p> 原来使用springboot自己捣鼓的博客，总是不够满意，就想着实在不行搞个静态博客，比较再三选择hexo,就用Hexo再捣鼓一个静态博客，折腾了几天也算有成果了。</p>
<a id="more"></a>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>本文环境如下</p>
<pre><code>$ hexo -v
hexo：4.2.1
hexo-cli：3.1.0
os：Windows_NT 10.0.18362 win32 x64
http_parser：2.8.0
node：8.12.0
v8：6.2.414.66
uv：1.19.2
zlib：1.2.11
ares：1.10.1-DEV
modules：57
nghttp2：1.32.0
napi： 3
openssl：1.0.2p
icu：60.1
unicode：10.0
cldr：32.0
tz：2017c</code></pre><h4 id="1-安装git环境"><a href="#1-安装git环境" class="headerlink" title="1.安装git环境"></a>1.安装git环境</h4><p>安装git for windows（或者其它git客户端）[git下载]（<a href="https://git-scm.com/downloads）" target="_blank" rel="noopener">https://git-scm.com/downloads）</a><br>验证git安装命令(可以用Windows的cmd窗口或鼠标右键菜单的git bash 窗口)</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre>
<h4 id="2-安装Node"><a href="#2-安装Node" class="headerlink" title="2.安装Node"></a>2.安装Node</h4><p>安装Node<a href="http://nodejs.cn/" target="_blank" rel="noopener">Node下载</a><br>验证node安装命令 (可以用Windows的cmd窗口或鼠标右键菜单的git bash 窗口)</p>
<pre class=" language-bash"><code class="language-bash">node --version</code></pre>
<h4 id="3-github账号"><a href="#3-github账号" class="headerlink" title="3.github账号"></a>3.github账号</h4><p>如果没有注册一个：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>主要是方便从git上下载各种东东。</p>
<h3 id="安装hexo及初始化"><a href="#安装hexo及初始化" class="headerlink" title="安装hexo及初始化"></a>安装hexo及初始化</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> D:hexo/    //换成你的目录
$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli   //安装hexo脚手架
$ hexo init     //Hexo 初始化 会自动在当前文件夹下下载搭建网站所需的所有文件
$ <span class="token function">npm</span> <span class="token function">install</span>   //安装依赖包命令</code></pre>
<h3 id="编译生成静态页面"><a href="#编译生成静态页面" class="headerlink" title="编译生成静态页面"></a>编译生成静态页面</h3><pre class=" language-bash"><code class="language-bash">hexo g</code></pre>
<h3 id="启动服务预览"><a href="#启动服务预览" class="headerlink" title="启动服务预览"></a>启动服务预览</h3><pre class=" language-bash"><code class="language-bash">hexo s</code></pre>
<p>打开浏览器访问：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a><br>如果正常出现页面说明搭建成功。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class=" language-bash"><code class="language-bash">hexo clean      //清空public文件夹内容
hexo g 或  hexo generate   //在hexo站点根目录下生成public文件夹，相关静态网页文件
hexo s 或  hexo server     //启动服务预览 http://localhost:4000
hexo d 或  hexo deploy     //部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 Git远程仓库，如github或自己搭建的远程服务器。</code></pre>
<p>也可以连起来使用：<font face="console" color="red" bgcolor='#fff'><code>hexo clean &amp; hexo g &amp; hexo s &amp;  hexo d</code></font></p>
<p>如有问题请参考本系列：Hexo搭建静态博客（五）——踩坑问题</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（四）——插件安装</title>
    <url>/posts/cda13ebe.html</url>
    <content><![CDATA[<p>Hexo静态博客插件安装相关内容，本文以安装search和abbrlink插件为例。</p>
<a id="more"></a>

<p>注意：安装插件不是非必须，除了部分插件跟着主题必须安装之外，其他插件属于可选。</p>
<h3 id="安装插件命令"><a href="#安装插件命令" class="headerlink" title="安装插件命令"></a>安装插件命令</h3><pre><code>npm install   hexo-generator-feed  --save   #订阅
npm install   hexo-generator-search --save  #搜索</code></pre><h3 id="本地搜索插件"><a href="#本地搜索插件" class="headerlink" title="本地搜索插件"></a>本地搜索插件</h3><p>这里说一下添加本地搜索，有的主题已经自己带了搜索功能，只要配置开启即可。如果没有带主题可以自己加上。<br><font color=red>特别说明：如果主题自带搜索，看自带搜索操作说明即可，如果主题无搜索看自定义模式说明即可。</font></p>
<h4 id="步骤一-安装插件"><a href="#步骤一-安装插件" class="headerlink" title="步骤一 安装插件"></a>步骤一 安装插件</h4><p>第一步：安装搜索插件 <code>npm install hexo-generator-searchdb --save</code></p>
<h4 id="步骤二-修改配置"><a href="#步骤二-修改配置" class="headerlink" title="步骤二 修改配置"></a>步骤二 修改配置</h4><p>第二步：根目录_config.yml文件配置添加</p>
<pre><code>search:
  path: search.xml
  field: post
  format: html
  limit: 10000</code></pre><p>主题配置_config.yml添加</p>
<pre><code>local_search: 
  enable: true</code></pre><h4 id="步骤三-添加搜索"><a href="#步骤三-添加搜索" class="headerlink" title="步骤三 添加搜索"></a>步骤三 添加搜索</h4><p>第三步:添加搜索框</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>search-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pure-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-input<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token attr-name">results</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pure-input pure-input-1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">204</span>, <span class="token number">232</span>, <span class="token number">207</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>local-search-result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>第1种，主题自带搜索模式，有独立的search页面,生成页面前面已经讲到了，把代码放到source/search/index.md文件中即可。</p>
<p>第2种，自定义模式，直接加在首页，想加哪个位置看自己喜好，位置找主题下的布局文件夹_layout或layout/partials之类的文件夹下,里面有head.ejs或head.swig文件（如果不是请自己查找节点，文件反正就那些）,添加html代码</p>
<h4 id="步骤四-引入js文件"><a href="#步骤四-引入js文件" class="headerlink" title="步骤四 引入js文件"></a>步骤四 引入js文件</h4><p>第四步：引入js</p>
<p>第1种，主题自带搜索模式，主题下的配置文件一般有scripts设置，直接配置路径，一般都有示例如</p>
<pre><code>scripts:
#- //cdn.bootcss.com/zepto/1.2.0/zepto.min.js
#- /js/xoxo.js
  - /js/search.js</code></pre><p>第2种，自定义模式，没有scripts配置,就在找主题下的布局文件夹_layout或layout/中，有js.ejs或srcipt.ejs，<br>文件可以从这里拿：<a href="https://github.com/zhzy2017/hexo-search-plugin-snippets" target="_blank" rel="noopener">https://github.com/zhzy2017/hexo-search-plugin-snippets</a><br>把search.js 放到source\js目录下,引入使用也有不同的方法</p>
<h4 id="步骤五-引入css文件"><a href="#步骤五-引入css文件" class="headerlink" title="步骤五 引入css文件"></a>步骤五 引入css文件</h4><p>第五步：css设置<br>有的带搜索的无须操作，没有的从下载hexo-search-plugin-snippets里面拿拷贝到source/css里面，引入即可，</p>
<p>第1种，主题自带搜索模式，一般不需要配置写在公共文件中，如果没有样式可以在主题下的配置文件一般有stylesheets设置，直接配置路径，一般都有示例：</p>
<pre><code>stylesheets:
# - /css/normalize.css
 - //cdn.bootcss.com/pure/1.0.0/pure-min.css
 - /css/xoxo.css
</code></pre><p>第2种，自定义模式，跟配引入js类似，找一下主题目录ejs或swig文件引入，或者直接用css或less文件放到source/css目录下的某个文件中，这样不需要引文件</p>
<p>其他插件，具体使用自行搜索，一般是修改配置或添加代码</p>
<pre><code>npm install hexo-generator-index-pin-top –save  #文章置顶插件 
npm uninstall hexo-generator-index –save     #文章置顶插件 
npm i –save hexo-wordcount        #文章字数+阅读时长统计     
npm install hexo-baidu-url-submit –save     #百度链接主动推送     
npm install hexo-deployer-ftpsync –save     #hexo上传至FTP服务器     
npm install hexo-deployer-cos –save     #hexo上传至腾讯云COS     
npm install hexo-deployer-aliyun –save     #hexo上传至阿里云     
npm install –save hexo-admin     #hexo管理插件     
hexo-blog-encrypt(请看文档)     #hexo文章加密码 
npm install leancloud-storage –save     #Valine评论     
Valine评论邮件通知     Valine评论提醒 
npm install hexo-deployer-git –save hexo安装git（允许使用git命令）</code></pre><p>更多插件请访问插件中心：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a><br>使用参考链接参考<a href="https://blog.csdn.net/q2158798/article/details/82354154" target="_blank" rel="noopener">幻凡ss</a></p>
<h3 id="修改修改永久链接"><a href="#修改修改永久链接" class="headerlink" title="修改修改永久链接"></a>修改修改永久链接</h3><p>Hexo修改修改永久链接的默认格式,方便SEO.<br><code>npm install hexo-abbrlink --save</code>  #文章永久链接 <a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">项目地址在这里</a></p>
<h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre>
<h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><pre><code># permalink: :year/:month/:day/:title/
# permalink_defaults:
permalink: posts/:abbrlink.html
abbrlink:
  alg: crc32  # 算法：crc16(default) and crc32
  rep: hex    # 进制：dec(default) and hex</code></pre><h4 id="3-重启"><a href="#3-重启" class="headerlink" title="3.重启"></a>3.重启</h4><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> heox g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>点击一篇文章，检查浏览器地址看看是不是发生变化了？</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>java 查漏补缺-jdk版本版本变化补充学习</title>
    <url>/posts/80dc9555.html</url>
    <content><![CDATA[<h2 id="JDK各个版本的变化补充学习"><a href="#JDK各个版本的变化补充学习" class="headerlink" title="JDK各个版本的变化补充学习"></a>JDK各个版本的变化补充学习</h2><h3 id="JDK1-5"><a href="#JDK1-5" class="headerlink" title="JDK1.5"></a>JDK1.5</h3><h4 id="1-类包装器"><a href="#1-类包装器" class="headerlink" title="1. 类包装器."></a>1. 类包装器.</h4><p>自动装箱与拆箱。实际操作中比较常见。</p>
<h4 id="2-枚举类型使用。"><a href="#2-枚举类型使用。" class="headerlink" title="2. 枚举类型使用。"></a>2. 枚举类型使用。</h4><p>实际中按需使用。我也在实际中使用过，需要注意的是使用枚举类型与扩展性的问题，比如性别永远只有”男”和”女”，不会增加扩展第三种，那么枚举是推荐使用的，如果枚举内容是扩展的，不建议使用枚举类型。</p>
<h4 id="3-静态方法倒入。"><a href="#3-静态方法倒入。" class="headerlink" title="3. 静态方法倒入。"></a>3. 静态方法倒入。</h4><p>说实话，这个我在实际中真没有用过。语法<code>import static</code><br>大致分两种：<br>   （1）导入指定类的某个静态成员变量、方法。<br>   （2）导入指定类的全部的静态成员变量、方法。</p>
<p>示例如下：</p>
<pre class=" language-JAVA"><code class="language-JAVA">/*
 * 使用import static,导入java.lang.System下的out这个静态成员变量
 */
import static java.lang.System.out;

public class ImptTest {

    public static void main(String[] args) {
        out.println("hello world");
    }
}</code></pre>
<p>导入静态方法示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 使用import static,导入java.lang.Math这个类中的round方法
 */</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>round<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImptTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//out.println("hello world");</span>
        <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>导入全部静态成员、静态方法示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * 像这样使用.*,则表示类中所有的静态成员变量和静态方法都被导入了
 */</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImptTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-可变参数使用。"><a href="#4-可变参数使用。" class="headerlink" title="4. 可变参数使用。"></a>4. 可变参数使用。</h4><p>该特征在实际中使用过，实用性还是非常不错的。</p>
<p>主要特征：<br>（1）一个方法中只能指定一个可变参数，<br>（2）可变参数必须是方法的最后一个参数。<br>（3）可变参数类型必须一致.<br>（4）拥有可变参数的方法可以被重载，在调用方法的时，如果能够和固定参数的方法匹配，也能够与可变长参数的方法匹配，则会调用固定参数的方法。<br>（5）被调用的方法不允许和两个可变参数匹配，否则出现错误。</p>
<p>调用特点：<br>（1）可以不写参数，即传入空参。<br>（2）可以直接在里边写入参数，参数间用逗号隔开；<br>（3）可变参数兼容数组，数组不能兼容可变参数；<br>（4）注意参数里的null<br>如示例：</p>
<pre class=" language-JAVA"><code class="language-JAVA">public static void say(String...names) { 
    for(String name : names) {
        System.out.print(name + ",hello! "); 
    }
}</code></pre>
<p>调用示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不传递参数</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传递多个参数</span>
    <span class="token function">say</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可传递数组</span>
<span class="token punctuation">}</span></code></pre>
<p>反面定义示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">",hello! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names <span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment" spellcheck="true">//不允许出现多个可变参数</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String sex<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
     <span class="token comment" spellcheck="true">//调用时与第一个say方法冲突，不会被调用</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>names<span class="token punctuation">,</span>Sring date<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment" spellcheck="true">//可变参数必须是最后一个参数</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="5-内省-Introspector"><a href="#5-内省-Introspector" class="headerlink" title="5. 内省(Introspector)"></a>5. 内省(Introspector)</h4><p>内省(Introspector) 是Java 语言对 JavaBean 类属性、事件的一种缺省处理方法。</p>
<p>JavaBean是一种特殊的类，主要用于传递数据信息，这种类中的方法主要用于访问私有的字段，且方法名符合某种命名规则。如果在两个模块之间传递信息，可以将信息封装进JavaBean中，这种对象称为“值对象”(Value Object)，或“VO”。方法比较少。这些信息储存在类的私有变量中，通过set()、get()获得。</p>
<p>实际使用引入apache的BeanUtils工具包：<br>　　 BeanUtils工具包：下载：<a href="http://commons.apache.org/beanutils/" target="_blank" rel="noopener">http://commons.apache.org/beanutils/</a>　<br>    (应用的时候还需要一个logging包 <a href="http://commons.apache.org/logging/" target="_blank" rel="noopener">http://commons.apache.org/logging/</a>)</p>
<h4 id="6-泛型-Generic"><a href="#6-泛型-Generic" class="headerlink" title="6.泛型(Generic)."></a>6.泛型(Generic).</h4><p>简单的说就是可以指定集合里元素的类型。</p>
<h4 id="7-for-each循环。"><a href="#7-for-each循环。" class="headerlink" title="7. for-each循环。"></a>7. for-each循环。</h4><p>比较常用。语法<code>for(类型 变量 ： 集合){}</code></p>
<p>示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForEachTest</span> <span class="token punctuation">{</span>

     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
         String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token string">"jerry"</span><span class="token punctuation">,</span><span class="token string">"mike"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span>String str <span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>
              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="JDK1-6"><a href="#JDK1-6" class="headerlink" title="JDK1.6"></a>JDK1.6</h3><h4 id="主要变化"><a href="#主要变化" class="headerlink" title="主要变化"></a>主要变化</h4><p>1、引入了一个支持脚本引擎的新框架Scripting for the Java Platform (JSR223脚本引擎)</p>
<p>2、UI的增强</p>
<p>3、对WebService支持的增强（JAX-WS2.0和JAXB2.0）</p>
<p>4、一系列新的安全相关的增强</p>
<p>5、JDBC4.0</p>
<p>6、Compiler API （JSR199）<br>支持动态编译。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaCompilerAPICompiler</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compile</span><span class="token punctuation">(</span>Path src<span class="token punctuation">,</span> Path output<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        JavaCompiler compiler <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span>StandardJavaFileManager fileManager <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">JavaFileObject</span><span class="token operator">></span> compilationUnits <span class="token operator">=</span> fileManager<span class="token punctuation">.</span><span class="token function">getJavaFileObjects</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> options <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> output<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            JavaCompiler<span class="token punctuation">.</span>CompilationTask task <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fileManager<span class="token punctuation">,</span> null<span class="token punctuation">,</span> options<span class="token punctuation">,</span> null<span class="token punctuation">,</span> compilationUnits<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>7、通用的Annotations支持 （JSR269）<br>一部分是进行注解处理的javax.annotation.processing。<br>另一部分是对程序的静态结构进行建模的javax.lang.model。</p>
<h4 id="JAXB2来实现对象与XML之间的映射"><a href="#JAXB2来实现对象与XML之间的映射" class="headerlink" title="JAXB2来实现对象与XML之间的映射"></a>JAXB2来实现对象与XML之间的映射</h4><p>JAXB:<br>    是Java Architecture for XML Binding的缩写，可以将一个Java对象和XML格式对象相互转换。JAXB2在底层是用StAX(JSR 173)来处理XML文档。</p>
<p>StAX(JSR 173)是JDK6.0中除了DOM和SAX之外的又一种处理XML文档的API。</p>
<p>StAX 的来历 ：在JAXP1.3(JSR 206)有两种处理XML文档的方法:DOM(Document Object Model)和SAX(Simple API for XML).</p>
<p>由 于JDK6.0中的JAXB2(JSR 222)和JAX-WS 2.0(JSR 224)都会用到StAX，所以Sun决定把StAX加入到JAXP家族当中来，并将JAXP的版本升级到1.4(JAXP1.4是JAXP1.3的维护版本). JDK6里面JAXP的版本就是1.4. 。</p>
<p>StAX是The Streaming API for XML的缩写，一种利用拉模式解析(pull-parsing)XML文档的API.StAX通过提供一种基于事件迭代器(Iterator)的API让程序员去控制xml文档解析过程,程序遍历这个事件迭代器去处理每一个解析事件，解析事件可以看做是程序拉出来的，也就是程序促使解析器产生一个解析事件，然后处理该事件，之后又促使解析器产生下一个解析事件，如此循环直到碰到文档结束符；</p>
<p>SAX也是基于事件处理xml文档，但却是用推模式解析，解析器解析完整个xml文档后，才产生解析事件，然后推给程序去处理这些事件；DOM 采用的方式是将整个xml文档映射到一颗内存树，这样就可以很容易地得到父节点和子结点以及兄弟节点的数据，但如果文档很大，将会严重影响性能。<br>更多学习可以参考1：<a href="https://blog.csdn.net/visant/java/article/details/79778967" target="_blank" rel="noopener">https://blog.csdn.net/visant/java/article/details/79778967</a><br>更多学习可以参考2：<a href="http://www.blogjava.net/hsith/archive/2006/06/29/55817.html" target="_blank" rel="noopener">http://www.blogjava.net/hsith/archive/2006/06/29/55817.html</a></p>
<p>示例代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileWriter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>JAXBException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Marshaller<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>Unmarshaller<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jaxb2Test</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JAXBException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>
        JAXBContext context <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//下面代码演示将对象转变为xml</span>
        Marshaller m <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createMarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Address address <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"China"</span><span class="token punctuation">,</span><span class="token string">"Shanghai"</span><span class="token punctuation">,</span><span class="token string">"Shanghai"</span><span class="token punctuation">,</span><span class="token string">" xuhui"</span><span class="token punctuation">,</span><span class="token string">"100080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"小菜"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">marshal</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//下面代码演示将上面生成的xml转换为对象</span>
        FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:\user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Unmarshaller um <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        User user2 <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>um<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Country:"</span><span class="token operator">+</span>user2<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入China</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>user类:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlElement<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlRootElement<span class="token punctuation">;</span>

<span class="token annotation punctuation">@XmlRootElement</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@XmlElement</span>
     String name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@XmlElement</span>
     <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@XmlElement</span>
    Calendar birthDay<span class="token punctuation">;</span> 
    <span class="token annotation punctuation">@XmlElement</span>
     Address address<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> Calendar birthDay<span class="token punctuation">,</span> Address address<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthDay <span class="token operator">=</span> birthDay<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Address <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> address<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Address类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk5<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlAttribute<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>XmlElement<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@XmlAttribute</span>
    String country<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String province<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String city<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@XmlElement</span>
    String street<span class="token punctuation">;</span>

    String houseNo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于没有添加@XmlElement,所以该元素不会出现在输出的xml中</span>

    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Address</span><span class="token punctuation">(</span>String country<span class="token punctuation">,</span> String province<span class="token punctuation">,</span> String city<span class="token punctuation">,</span> String street<span class="token punctuation">,</span> String houseNo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>country <span class="token operator">=</span> country<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>houseNo <span class="token operator">=</span> houseNo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> country<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>转换的XML内容：</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>小菜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>birthDay</span><span class="token punctuation">></span></span>2020-02-24T22:09:03.019+08:00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>birthDay</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span> <span class="token attr-name">country</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>province</span><span class="token punctuation">></span></span>Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>province</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">></span></span>Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>street</span><span class="token punctuation">></span></span> xuhui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>street</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre>
<p>注意@XmlAccessorType注解。<br>另Castor实现XML与Java的互转 <a href="http://www.castor.org/" target="_blank" rel="noopener">http://www.castor.org/</a></p>
<p>另外还有 Compiler API，Http Server API，插入式注解处理API(Pluggable Annotation Processing API)，对脚本语言的支持如: ruby, groovy, javascript，Common Annotations 涉及内容较多篇幅较长，后续单独学习。</p>
<h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><h4 id="1-switch中可以使用字符串。"><a href="#1-switch中可以使用字符串。" class="headerlink" title="1. switch中可以使用字符串。"></a>1. switch中可以使用字符串。</h4><pre><code>非常实用的。</code></pre><h4 id="2-泛型实例化类型自动推断。"><a href="#2-泛型实例化类型自动推断。" class="headerlink" title="2. 泛型实例化类型自动推断。"></a>2. 泛型实例化类型自动推断。</h4><p>指定类型:</p>
<pre class=" language-java"><code class="language-java">    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>自动推断:</p>
<pre class=" language-java"><code class="language-java">    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h4 id="3-数值字面量改进"><a href="#3-数值字面量改进" class="headerlink" title="3. 数值字面量改进."></a>3. 数值字面量改进.</h4><p>数字前面加”0B”或”0b”表示二进制数。如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> binary <span class="token operator">=</span> <span class="token number">0b10011001</span><span class="token punctuation">;</span></code></pre>
<p>数值中可以添加”_”。 如： </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> one_million <span class="token operator">=</span> 1_000_000<span class="token punctuation">;</span></code></pre>
<h4 id="4-try-with-resources语句。"><a href="#4-try-with-resources语句。" class="headerlink" title="4. try-with-resources语句。"></a>4. try-with-resources语句。</h4><p>try-with-resources语句中会被自动调用，用于自动释放资源。自动关闭接口AutoCloseable。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>OutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 不需要再次指明fos.close();</span>
<span class="token punctuation">}</span></code></pre>
<ol start="5">
<li>优化异常处理</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>
   result <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><h4 id="1-Lambda-表达式"><a href="#1-Lambda-表达式" class="headerlink" title="1. Lambda 表达式"></a>1. Lambda 表达式</h4><p>Lambda表达式（也称为闭包）是整个Java 8发行版中最受期待的在Java语言层面上的改变，Lambda允许把函数作为一个方法的参数进行传递。</p>
<p>Lambda 表达式的标准格式：</p>
<pre><code>(参数类型 参数名) -&gt; {
    方法体;
    return 返回值;
}</code></pre><p>Lambda 表达式的省略规则：<br>    1. 小括号中的参数类型可以省略。<br>    2. 如果小括号中只有一个参数，那么可以省略小括号。<br>    3. 如果大括号中只有一条语句，那么可以省略大括号，return，分号。<br>其他注意：不允许声明一个与局部变量同名的参数或者局部变量。<br>四种方法引用类型<br>| 类型          | 示例                                      |<br>|—————|——————————————-|<br>| 引用静态方法 |    ContainingClass::staticMethodName |<br>| 引用某个对象的实例方法     |containingObject::instanceMethodName |<br>| 引用某个类型的任意对象的实例方法 |    ContainingType::methodName |<br>| 引用构造方法 |    ClassName::new  |</p>
<pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 使用 java 7 排序</span>
   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortJava7</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>   
      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token annotation punctuation">@Override</span>
         <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment" spellcheck="true">// 使用 java 8 排序</span>
   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortJava8</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names<span class="token punctuation">)</span><span class="token punctuation">{</span>
      Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span></code></pre>
<p>Lambda 使用条件</p>
<p>Lambda 表达式的使用前提:</p>
<pre><code>必须有接口（不能是抽象类），接口中有且仅有一个需要被重写的抽象方法。
必须支持上下文推导，要能够推导出来 Lambda 表达式表示的是哪个接口中的内容。 
可以使用接口当做参数，然后传递 Lambda 表达式(常用)，也可以将 Lambda 表达式赋值给一个接口类型的变量。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">LambdaTest</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//使用接口当做参数</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>MyInterface m<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//m = s -> System.out.println(s)</span>
        m<span class="token punctuation">.</span><span class="token function">printStr</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//使用接口当做参数，然后传递Lambda表达式。</span>
        <span class="token comment" spellcheck="true">//method(s -> System.out.println(s));</span>

        <span class="token comment" spellcheck="true">//使用匿名内部类方式创建对象</span>
        <span class="token comment" spellcheck="true">/*
        MyInterface m = new MyInterface() {
            @Override
            public void printStr(String str) {
                System.out.println(str);
            }
        };
        */</span>
        <span class="token comment" spellcheck="true">//Lambda 表达式赋值给接口类型变量</span>
        MyInterface m <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        m<span class="token punctuation">.</span><span class="token function">printStr</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 1.1使用匿名内部类  </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 1.2使用 lambda expression  </span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 2.1使用匿名内部类  </span>
        Runnable race1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token annotation punctuation">@Override</span>  
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 2.2使用 lambda expression  </span>
        Runnable race2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment" spellcheck="true">// 直接调用 run 方法(没开新线程哦!)  </span>
        race1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        race2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h4><p>JDK 8之前就有的函数式接口（使用@FunctionalInterface定义 ）</p>
<pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Runnable

java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable

java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>PrivilegedAction

java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator

java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileFilter

java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>PathMatcher 

java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler

java<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>PropertyChangeListener

java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener  

javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ChangeListener </code></pre>
<h4 id="3-接口默认方法与静态方法"><a href="#3-接口默认方法与静态方法" class="headerlink" title="3. 接口默认方法与静态方法"></a>3. 接口默认方法与静态方法</h4><p>接口默认方法，用<code>default</code>关键字。<br>接口静态方法，用<code>static</code>关键字：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">printStr</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" this is default method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Interface Null Check"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> str <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> 
<span class="token punctuation">}</span></code></pre>
<p>注意：类继承多个Interface接口同名方法(如show())时，必须在子类中@Override重写父类show()方法。</p>
<p>特性说明：</p>
<pre><code>1,函数式接口仅仅只有一个方法(非默认或静态方法)，用于显示转换成ladbma表达式。
2, java.lang.Runnable接口 java.util.concurrent.Callable接口是两个最典型的函数式接口。
3.如果一个函数式接口添加一个普通方法，就变成了非函数式接口（一般定义的接口）。
4.Jdk8 规范里添加了注解@FunctionalInterface来限制函数式接口不能修改为普通的接口.</code></pre><p>jdk8新增了四个重要的函数式接口：函数形接口 、供给形接口、消费型接口、判断型接口 </p>
<h4 id="4-日期时间的API"><a href="#4-日期时间的API" class="headerlink" title="4. 日期时间的API."></a>4. 日期时间的API.</h4><p>新的时间及日期API类在java.time包中，不可变且线程安全的。<br>Instant获取时间戳, LocalDate只处理日期、LocalTime只处理时间,LocalDateTime只处理日期时间，ZonedDateTime包含时区的日期时间<br>TemporalAdjusters 日期调整<br>DateTimeFormatter 替代之前版本的SimpleDateFormat类<br>YearMonth年月组合,MonthDay月日组合<br>Clockdeng</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

         LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>Clock<span class="token punctuation">.</span><span class="token function">systemUTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         LocalDateTime dttm <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date = "</span> <span class="token operator">+</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" time = "</span> <span class="token operator">+</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm = "</span> <span class="token operator">+</span>dttm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>控制台输出：</p>
<pre><code> date = 2020-05-31
 time = 16:29:41.010
 dttm = 2020-05-31T00:29:41.010</code></pre><p>更多内容参考<a href="/post/d0e15f60.html">《java 查漏补缺-java8里的日期时间API》</a></p>
<h4 id="5-Optional-类"><a href="#5-Optional-类" class="headerlink" title="5. Optional 类"></a>5. Optional 类</h4><p>Optional 是个容器，它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。比较友好的的解决空指针异常。Optional.of()或者Optional.ofNullable()：创建Optional对象，差别在于of不允许参数是null，而ofNullable则无限制。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 参数不能是null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt1 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 参数可以是null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt2 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 参数可以是非null</span>
        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> opt3 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> opt4 <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt4<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// orElse</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>opt4<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>

        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optional1<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="6-Nashorn-JavaScript引擎。"><a href="#6-Nashorn-JavaScript引擎。" class="headerlink" title="6. Nashorn, JavaScript引擎。"></a>6. Nashorn, JavaScript引擎。</h4><p>Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngine<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptEngineManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>script<span class="token punctuation">.</span>ScriptException<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NashornTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ScriptException <span class="token punctuation">{</span>
        ScriptEngine engine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptEngineManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEngineByName</span><span class="token punctuation">(</span><span class="token string">"nashorn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        engine<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"print('Hello World!');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>Nashorn JavaScript基于ECMAScript 5.1，但是它的后续版本会对ES6提供支持：<br>Nashorn的当前策略遵循ECMAScript规范。当我们在JDK8中发布它时，它将基于ECMAScript 5.1。Nashorn未来的主要发布基于ECMAScript 6。<br>Nashorn定义了大量对ECMAScript标准的语言和API扩展。但是首先让我们看一看Java和JavaScript代码如何交互。</p>
<p>注意：</p>
<p>该引擎在java11是被弃用。ECMAScript语言标准的快速发展，维护Nashorn引擎变得越发挑战，因此该引擎将在Java中废弃。<br>两个模块将会被最终弃用，被标注为@Deprecated(forRemoval=true)。</p>
<p>jdk.scripting.nashorn模块，包含dk.nashorn.api.scripting和jdk.nashorn.api.tree包。jdk.scripting.nashorn.shell模块，包含jjs工具，运行jjs将显示警告。</p>
<p>需要注意的是，java.scripting模块中javax.script包下的相关API不受影响。</p>
<h4 id="7-新工具"><a href="#7-新工具" class="headerlink" title="7. 新工具"></a>7. 新工具</h4><p>新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。<br>Nashorn引擎jjs：<br>jjs是一个基于标准Nashorn引擎的命令行工具，可以接受js源码并执行。<br>类依赖分析器jdeps：<br>jdeps是一个命令行工具，它可以展示包层级和类层级的Java类依赖关系，它以.class文件、目录或者Jar文件为输入，然后会把依赖关系输出到控制台。<br>JVM的新特性<br>使用Metaspace（JEP 122）代替持久代（PermGen space）。在JVM参数方面，使用<code>-XX:MetaSpaceSize</code>和<code>-XX:MaxMetaspaceSize</code>代替原来的<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>。</p>
<h4 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h4><p>若遇到随时补充学习。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>java 查漏补缺-java8里的日期时间API</title>
    <url>/posts/d0e15f60.html</url>
    <content><![CDATA[<h3 id="Java-8-日期时间-API"><a href="#Java-8-日期时间-API" class="headerlink" title="Java 8 日期时间 API"></a>Java 8 日期时间 API</h3><p>Java 8通过发布新的Date-Time API (JSR 310)来进一步加强对日期与时间的处理。 旧版的<code>java.util.Date</code>是非线程安全的。</p>
<h4 id="1-java8日期时间相关API"><a href="#1-java8日期时间相关API" class="headerlink" title="1. java8日期时间相关API"></a>1. java8日期时间相关API</h4><p>Java 8 在 java.time 包下提供了很多新的 API：</p>
<div>
Local (本地) − 简化了日期时间的处理，没有时区的问题。

<p>Zoned (时区) − 通过制定的时区处理日期时间。</p>
<p>Instant（时间戳）-精确到纳秒的的某个时间点，不包含时区，允许加减运算。该方法默认使用的是UTC(协调世界时——由原子钟提供)时间，可以使用equeal 和 compareTo来比较两个时间点的值。支持旧版时间转换新版时间戳。</p>
<p>LocalDate（本地日期）− 简化了日期处理，不带时间。</p>
<p>LocalTime（本地时间）− 简化了时间处理，不带日期且没有偏移信息、无时区的时间。</p>
<p>LocalDateTime（本地日期时间）− 日期+时间的处理。</p>
<p>ZoneDateTime（时区日期时间）- 包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。</p>
<p>MonthDay- 月日组合。它是一个值类（value class）,由，不包含年信息，可以用来代表每年重复出现的一些日期或其他组合。</p>
<p>YearMonth - 年月组合。</p>
<p>WeekFields(周) - 处理周的计算。</p>
<p>DateTimeFormatter − 提供格式化和解析功能。下面详细的介绍使用方法。<br>任何修改操作都会返回一个新的实例。</p>
<p>Clock - 时钟。可以获取某个时区下（对时区是敏感的）当前的瞬时时间、日期。用来代替System.currentTimelnMillis()与TimeZone.getDefault()方法。</p>
</div>

<h4 id="2-基本获取与简单计算。"><a href="#2-基本获取与简单计算。" class="headerlink" title="2. 基本获取与简单计算。"></a>2. 基本获取与简单计算。</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>DayOfWeek<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Instant<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Period<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>ChronoUnit<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>WeekFields<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 时间戳</span>
        Instant now <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" now = "</span> <span class="token operator">+</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date = "</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>Clock<span class="token punctuation">.</span><span class="token function">systemUTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" time = "</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>

        LocalDateTime dttm <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm = "</span> <span class="token operator">+</span> dttm<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将java.util.Date转换为Instant</span>
        Instant instant1 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 从字符串类型中创建Instant类型的时间</span>
        Instant instant2 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1995-10-23T10:12:35Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Instant instant3 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将现在的时间加上2个小时10分钟</span>
        Instant changeIns <span class="token operator">=</span> instant3<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>changeIns<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 使用instant计算7天前</span>
        instant3<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法1</span>
        instant3<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法2</span>

        <span class="token comment" spellcheck="true">// 计算两个Instant之间的分钟数</span>
        Instant instant4 <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// long diffAsMinutes = instant.periodUntil(instant3, ChronoUnit.MINUTES); //</span>
        <span class="token comment" spellcheck="true">// 方法1</span>
        <span class="token keyword">long</span> diffAsMinutes1 <span class="token operator">=</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>instant1<span class="token punctuation">,</span> instant4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方法2</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>diffAsMinutes1 <span class="token operator">/</span> <span class="token number">60</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 一周从周日开始</span>
        WeekFields weekFields <span class="token operator">=</span> WeekFields<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate today <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是今年第"</span> <span class="token operator">+</span> today<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>weekFields<span class="token punctuation">.</span><span class="token function">weekOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 计算date的相差天数</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 计算date的相差月数</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">until</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 计算date的相差月天，（相差0年1月24天）</span>
        LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>period<span class="token punctuation">.</span><span class="token function">getYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> period<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Clock utc_cl <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemUTC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" utc_cl :"</span> <span class="token operator">+</span>utc_cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Clock def_cl <span class="token operator">=</span> Clock<span class="token punctuation">.</span><span class="token function">systemDefaultZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" def_cl :"</span> <span class="token operator">+</span>def_cl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h4 id="3-日期判断与比较"><a href="#3-日期判断与比较" class="headerlink" title="3. 日期判断与比较"></a>3. 日期判断与比较</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeCompareTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 日期比较</span>
        LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// isBefore</span>
        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1 在date2的前面 ："</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// isAfter</span>
        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1 在date2的后面 ："</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" date1   equals  date2  ? "</span> <span class="token operator">+</span> b3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 日期时间比较</span>
        LocalDateTime dttm1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm1 = "</span> <span class="token operator">+</span> dttm1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime dttm2 <span class="token operator">=</span> dttm1<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm2 = "</span> <span class="token operator">+</span> dttm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> b4 <span class="token operator">=</span> dttm1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>dttm2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dttm1 在 dttm2 的前面 ："</span> <span class="token operator">+</span> b4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-时区处理"><a href="#4-时区处理" class="headerlink" title="4. 时区处理"></a>4. 时区处理</h4><p>ZonId代表的是某个特定时区，ZonedDateTime代表带时区的时间，等同于以前的GregorianCalendar类。使用该类，可以将本地时间转换成另一个时区中的对应时间。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxc<span class="token punctuation">.</span>jdk8<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">.</span>out<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ZoneId<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>ZonedDateTime<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeZoneTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" localDateTime = "</span> <span class="token operator">+</span> localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span>SHORT_IDS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"CTT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取定义好的时区</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" zone = "</span> <span class="token operator">+</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//包含时区的时间</span>
        ZonedDateTime dtWithZone <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" dtWithZone = "</span> <span class="token operator">+</span> dtWithZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>输出</p>
<pre><code> localDateTime = 2020-05-31T23:54:42.831
 zone = Asia/Shanghai
 dtWithZone = 2020-05-31T23:54:42.831+08:00[Asia/Shanghai]</code></pre><p> 注意：对应时区的文本可以直接手动填写，也可以调用系统默认定义的。</p>
<h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><p>可以参考<a href="https://www.matools.com/api/java8" target="_blank" rel="noopener">java 8 API</a>,在实际遇到再补充。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>java 查漏补缺-Java8 中的 Optional</title>
    <url>/posts/c68d7a69.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM学习导航（第三版）</title>
    <url>/posts/2a1a7c1f.html</url>
    <content><![CDATA[<pre><code>本文记录关于深入理解JVM（第三版）相关学习导航笔记。</code></pre><h4 id="java虚拟机内存自动管理"><a href="#java虚拟机内存自动管理" class="headerlink" title="java虚拟机内存自动管理"></a>java虚拟机内存自动管理</h4><ol>
<li><p>JVM内存自动管理中的的内存结构。</p>
<p> 程序计数器<br> java堆（Heap）<br> 方法区<br> 虚拟机栈<br> 本地方法栈</p>
<p> SOF,OOM</p>
</li>
</ol>
<ol start="2">
<li><p>JVM中对象的创建过程</p>
<p> 检查堆中的类符号<br> 检查类加载<br> 分配新对象内存空间——指针碰撞，空闲列表<br> 初始化零值<br> 执行<init>()方法</p>
</li>
<li><p>垃圾收集器算法</p>
<p>分代回收理论<br>标记——清除算法<br>标记——复制算法<br>标记——整理算法<br>半复制算法</p>
</li>
<li><p>常见的垃圾收集器</p>
<p> Serial收集器<br> ParNew收集器<br> Parallel Scavenge收集器<br> Serial Old收集器<br> Parallel Old收集器<br> CMS收集器<br> Garbage First收集器</p>
</li>
<li><p>低延迟垃圾收集器</p>
<p> Shenandoah收集器<br> ZGC收集器</p>
</li>
<li><p>内存分配回收策略</p>
<p> 对象优先在Eden分配<br> 大对象直接进入老年代<br> 长期存活的对象将进入老年代<br> 动态对象年龄判定<br> 空间分配担保</p>
</li>
<li><p>性能监控、故障处理工具</p>
<p> 基础故障处理工具<br> 可视化故障处理工具<br> Hotspot虚拟机插件及工具</p>
</li>
<li><p>调优分析学习</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>编号</th>
<th>文章地址</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><a href="9f103da7.html">JVM内存结构</a></td>
</tr>
<tr>
<td>2</td>
<td><a href="b287f556.html">JVM的对象创建</a></td>
</tr>
<tr>
<td>3</td>
<td><a href="bce48291.html">JVM的对象生死</a></td>
</tr>
<tr>
<td>4</td>
<td><a href="50b49e8d.html">JVM垃圾收集器算法</a></td>
</tr>
<tr>
<td>5</td>
<td><a href="d01dbbb1.html">JVM常见的垃圾收集器</a></td>
</tr>
<tr>
<td>6</td>
<td><a href="f8161112.html">JVM低延迟垃圾收集器：Shenandoah</a></td>
</tr>
<tr>
<td>7</td>
<td><a href="e3d9aed7.html">JVM低延迟垃圾收集器:ZGC</a></td>
</tr>
<tr>
<td>8</td>
<td>[JVM低内存分配回收策略]</td>
</tr>
<tr>
<td>9</td>
<td>[JVM收集器与常见参数]</td>
</tr>
<tr>
<td>9</td>
<td>[JVM监控调优工具]</td>
</tr>
<tr>
<td>10</td>
<td>[JVM调优指南]</td>
</tr>
</tbody></table>
<!--
#### java虚拟机执行子系统

1. jvm类文件结构

    class类文件结构
    字节码指令
    公有设计私有实现
    class类文件结构发展

2. jvm类加载机制


3. 字节码执行引擎


#### 程序编译与代码优化

1. 前端编译与优化


2. 后端编译与优化

     即时编译
     提前编译
     编译器优化技术
     深入理解编译器


-->]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之对象创建与布局</title>
    <url>/posts/b287f556.html</url>
    <content><![CDATA[<h2 id="HotSpot-虚拟机对象创建与布局"><a href="#HotSpot-虚拟机对象创建与布局" class="headerlink" title="HotSpot 虚拟机对象创建与布局"></a>HotSpot 虚拟机对象创建与布局</h2><p>HotSpot虚拟机在Java堆中对象分配、布局和访问的全过程。<br>创建对象的三种方式：new关键字、复制、反序列化。</p>
<h3 id="一-对象的创建"><a href="#一-对象的创建" class="headerlink" title="一. 对象的创建"></a>一. 对象的创建</h3><p>此处提及的对象创建，只是普通Java对象，不包括数组和Class对象。</p>
<h4 id="1-检查符合引用和类加载情况"><a href="#1-检查符合引用和类加载情况" class="headerlink" title="1. 检查符合引用和类加载情况"></a>1. 检查符合引用和类加载情况</h4><p>当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p>
<h4 id="2-为新生对象分配内存"><a href="#2-为新生对象分配内存" class="headerlink" title="2. 为新生对象分配内存"></a>2. 为新生对象分配内存</h4><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务其实就是把一块确定大小的内存块从Java堆中划分出来存放该对象。</p>
<p>关于对象内存分配方式：<br>（1）“指针碰撞”（Bump The Pointer）</p>
<blockquote>
<p>假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”（Bump The Pointer）</p>
</blockquote>
<p>（2）“空闲列表”（Free List）:</p>
<blockquote>
<p>Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List）</p>
</blockquote>
<p>选择哪种分配方式，取决于Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定。因此：</p>
<p>（A）当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；<br>（B）当使用CMS这种基于清除（Sweep）算法的收集器时，理论上就只能采用较为复杂的空闲列表来分配内存。</p>
<p>考虑对象内存分配的线程安全问题：</p>
<blockquote>
<p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为<code>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</code>，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定【对分配内存空间的动作进行同步处理——实际上虚拟机是采用<code>CAS</code>配上失败重试的方式保证更新操作的原子性】。虚拟机是否使用<code>TLAB</code>，可以通过<code>-XX：+/-UseTLAB</code>参数来设定。</p>
</blockquote>
<p>每个线程在堆中都会有私有的<code>分配缓冲区(TLAB)</code>，这样可以很大程度避免在并发情况下频繁创建对象造成的线程不安全。</p>
<h4 id="3-将分配的内存初始化为零值"><a href="#3-将分配的内存初始化为零值" class="headerlink" title="3. 将分配的内存初始化为零值"></a>3. 将分配的内存初始化为零值</h4><p>内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值，如果使用了TLAB的话，这一项工作也可以提前至<code>TLAB</code>分配时顺便进行。这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。</p>
<h4 id="4-对新生的对象进行设置"><a href="#4-对新生的对象进行设置" class="headerlink" title="4. 对新生的对象进行设置"></a>4. 对新生的对象进行设置</h4><p>对象的元数据信息、对象的哈希码（实际上对象的哈希码会延后到真正调用<code>Object::hashCode()</code>方法时才计算）、对象的<code>GC</code>分代年龄等信息。这些信息存放在对象的对象头（Object Header）之中。根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<h4 id="5-执行-lt-init-gt-方法。"><a href="#5-执行-lt-init-gt-方法。" class="headerlink" title="5. 执行&lt;init&gt;()方法。"></a>5. 执行<code>&lt;init&gt;()</code>方法。</h4><p>new指令之后会接着执行<code>&lt;init&gt;()</code>方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全被构造出来。</p>
<p><code>&lt;init&gt;()</code>方法是 对象构造时用以初始化对象的，构造器以及非静态初始化块中的代码。</p>
<p>区别与类加载的<code>&lt;clinit&gt;()</code>方法</p>
<h3 id="二、对象的布局"><a href="#二、对象的布局" class="headerlink" title="二、对象的布局"></a>二、对象的布局</h3><p><code>HotSpot</code>虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：</p>
<pre><code>对象头（Header）、
实例数据（Instance Data）
对齐填充（Padding）。</code></pre><h4 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1. 对象头"></a>1. 对象头</h4><p>对象头部分包括两类信息：</p>
<p>（1）第一类是用于存储对象自身的运行时数据，如哈希码<code>（HashCode）</code>、<code>GC分代年龄</code>、<code>锁状态标志</code>、<code>线程持有的锁</code>、<code>偏向线程ID</code>、<code>偏向时间戳</code>等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特，官方称它为“Mark Word”。</p>
<p>（2）第二类是类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。</p>
<pre><code>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，即，查找对象的元数据信息并不一定要经过对象本身</code></pre><h4 id="2-实例数据："><a href="#2-实例数据：" class="headerlink" title="2. 实例数据："></a>2. 实例数据：</h4><p>实例数据部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。</p>
<blockquote>
<p>这部分的存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle参数）和字段在Java源码中定义顺序的影响。</p>
<p>HotSpot虚拟机默认的分配顺序为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers，OOPs）。<br>相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。</p>
<p>如果HotSpot虚拟机的+XX：CompactFields参数值为true（默认就为true），那子类之中较窄的变量也允许插入父类变量的空隙之中，以节省出一点点空间</p>
</blockquote>
<h4 id="3-对齐填充"><a href="#3-对齐填充" class="headerlink" title="3.对齐填充"></a>3.对齐填充</h4><p>（A）非必然，无特殊含义，仅作占位符使用。</p>
<p>（B）对象实例数据没有对齐时需要对齐填充。</p>
<blockquote>
<p>对齐填充，这并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于<code>HotSpot虚拟机</code>的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数（1倍或者2倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。</p>
</blockquote>
<h3 id="三、对象的访问定位"><a href="#三、对象的访问定位" class="headerlink" title="三、对象的访问定位"></a>三、对象的访问定位</h3><p>Java程序会通过栈上的reference数据来操作堆上的具体对象。</p>
<p>对象访问主流的访问方式主要有使用句柄和直接指针两种：</p>
<p>（1）使用句柄访问的话，Java堆中将可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images//jvm-images/jvm-obj-ref-1.jpg" alt="句柄访问示意图"></p>
<p>（2）使用直接指针访问的话，Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-obj-ref-2.jpg" alt="直接指针访问示意图"></p>
<p><strong>句柄访问</strong> 与 <strong>直接指针</strong> 比较：</p>
<p>（A）使用句柄的最大好处是 reference 中存储的是稳定的句柄地址，在对象移动(GC)是只改变实例数据指针地址，reference 自身不需要修改。<br>（B）直接指针访问的最大好处是速度快，节省了一次指针定位的时间开销。如果是对象频繁 GC 那么句柄方法好，如果是对象频繁访问则直接指针访问好。</p>
<p><code>HotSpot</code>而言，它主要使用第二种方式进行对象访问。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之内存结构</title>
    <url>/posts/9f103da7.html</url>
    <content><![CDATA[<h2 id="jvm-内存管理机制"><a href="#jvm-内存管理机制" class="headerlink" title="jvm 内存管理机制"></a>jvm 内存管理机制</h2><blockquote>
<p>参考资料：<br>《深入理解Java虚拟机 JVM高级特性与最佳实践 第3版》<br>《Java虚拟机规范（Java SE 7）》</p>
</blockquote>
<h3 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h3><p>根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域.<br>jvm-pic-1.jpg</p>
<h4 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h4><blockquote>
<p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
</blockquote>
<p>程序计数器特征：<br>（1）是“线程私有”的内存。每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。<br>（2）如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。<br>（3）此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</p>
<h4 id="2-Java虚拟机栈"><a href="#2-Java虚拟机栈" class="headerlink" title="2. Java虚拟机栈"></a>2. Java虚拟机栈</h4><blockquote>
<p>Java虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧[栈帧是方法运行期间很重要的基础数据结构]（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
</blockquote>
<p>局部变量表相关：</p>
<blockquote>
<p>局部变量表存放了编译期可知的各种Java虚拟机基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>
</blockquote>
<p>在《Java虚拟机规范》中， Java虚拟机栈可能出现两类异常状况：</p>
<blockquote>
<p>（1）如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；<br>（2）如果Java虚拟机栈容量可以动态扩展[Hotspot的虚拟机栈不允许扩展]，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h4><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，区别:</p>
<blockquote>
<p>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，<br>本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>
</blockquote>
<p>有的Java虚拟机（譬如Hot-Spot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br>本地方法栈也可能出现两类异常状况：</p>
<blockquote>
<p>（1）本地方法栈也会在栈深度溢出时抛出StackOverflowError<br>（2）本地方法栈扩展失败时抛出OutOfMemoryError。</p>
</blockquote>
<h4 id="4-Java堆"><a href="#4-Java堆" class="headerlink" title="4. Java堆"></a>4. Java堆</h4><blockquote>
<p>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java世界里“<strong>几乎</strong>”所有的对象实例都在这里分配内存。</p>
</blockquote>
<p>Java堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC堆”。</p>
<p>从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以Java堆中经常会出现“新生代”“老年代”、“永久代”、“Eden空间”、“From Survivor空间”、“To Survivor空间”等。</p>
<p>如果从分配内存的角度看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB），以提升对象分配时的效率。</p>
<p>Java堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</p>
<p>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定）。</p>
<p>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。</p>
<h4 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h4><blockquote>
<p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>
</blockquote>
<p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作“非堆”（Non-Heap），目的是与Java堆区分开来。</p>
<p>在JDK 6的时候HotSpot开发团队就有放弃永久代，逐步改为采用<code>本地内存（Native Memory）</code>来实现方法区的计划。<br>到了JDK 7的HotSpot，已经把原本放在永久代的字符串常量池、静态变量等移至堆内存。</p>
<blockquote>
<p>jdk7开始方法区的逐渐移除：符号引用(Symbols)移至native heap，字面量(interned strings)和静态变量(class statics)移至java heap。</p>
</blockquote>
<p>到了JDK 8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的<code>元空间（Meta-space）</code>来代替，把JDK 7中永久代还剩余的内容（主要是类型信息）全部移到元空间中。</p>
<blockquote>
<p>JDK1.8以前的HotSpot JVM有方法区，也叫永久代(permanent generation)。<br>方法区用于存放已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码。<br>方法区是一片连续的堆空间，通过-XX:MaxPermSize来设定永久代最大可分配空间，当JVM加载的类信息容量超过了这个值，会报OOM:PermGen错误。<br>永久代的GC是和老年代(old generation)捆绑在一起的，无论谁满了，都会触发永久代和老年代的垃圾收集。</p>
</blockquote>
<p>为什么要用Metaspace替代方法区？</p>
<p>随着动态类加载的情况越来越多，这块内存变得不太可控，如果设置小了，系统运行过程中就容易出现内存溢出，设置大了又浪费内存。</p>
<blockquote>
<p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载，卸载条件相当苛刻。<br>方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。</p>
</blockquote>
<h4 id="6-运行时常量池"><a href="#6-运行时常量池" class="headerlink" title="6. 运行时常量池"></a>6. 运行时常量池</h4><blockquote>
<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p>
</blockquote>
<p>运行时常量池特征：<br>（1）存储数据条件宽松。（保存Class文件中描述的符号引用，把由符号引用翻译出来的直接引用，均可放入运行时常量池）<br>（2）具备动态性。（预置入Class文件中常量池的内容，或运行期间新的常量[如String类的intern()方法]，均可放入）</p>
<p>运行时常量池是方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>
<h4 id="7-直接内存"><a href="#7-直接内存" class="headerlink" title="7. 直接内存"></a>7. 直接内存</h4><blockquote>
<p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。</p>
</blockquote>
<blockquote>
<p>在JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p>
</blockquote>
<blockquote>
<p>本机直接内存的分配不会受Java堆大小的限制，但受到本机总内存（包括物理内存、SWAP分区或者分页文件）大小以及处理器寻址空间的限制。<br>配置虚拟机参数时，设置-Xmx等参数信息，若使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），就会导致动态扩展时出现OutOfMemoryError。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>内存结构</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之对象生死</title>
    <url>/posts/bce48291.html</url>
    <content><![CDATA[<h3 id="jvm-检测判断对象的生死"><a href="#jvm-检测判断对象的生死" class="headerlink" title="jvm 检测判断对象的生死"></a>jvm 检测判断对象的生死</h3><p>垃圾收集（Garbage Collection，简称GC）</p>
<p>对象生死</p>
<blockquote>
<p>堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还“存活”着，哪些已经“死去”（“死去”即不可能再被任何途径使用的对象）了。对象是否存活的算法各不相同。</p>
</blockquote>
<h4 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1. 引用计数算法"></a>1. 引用计数算法</h4><p>引用计数算法:<br><P><br>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的<br></P><br>引用计数算法（Reference Counting）虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。</p>
<p>引用计数算法的缺陷：两个对象相互引用，永不回收。<br>代码示例：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * testGC()方法执行后，objA和objB会不会被GC呢？
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceCountingGC</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否有回收过
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ReferenceCountingGC objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ReferenceCountingGC objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objA．instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>
        objB．instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>

        objA <span class="token operator">=</span> null<span class="token punctuation">;</span>
        objB <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 假设在这行发生GC，objA和objB是否能被回收？</span>
        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行结果：</p>
<pre><code>[Full GC (System) [Tenured: 0K-&gt;210K(10240K), 0.0149142 secs] 4603K-&gt;210K(19456K), [Perm : 2999K-&gt;2999K(21248K)], 0.0150007 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]
Heap
    def new generation   total 9216K, used 82K [0x00000000055e0000, 0x0000000005fe0000, 0x0000000005fe0000)
    Eden space 8192K,   1% used [0x00000000055e0000, 0x00000000055f4850, 0x0000000005de0000)
    from space 1024K,   0% used [0x0000000005de0000, 0x0000000005de0000, 0x0000000005ee0000)
    to   space 1024K,   0% used [0x0000000005ee0000, 0x0000000005ee0000, 0x0000000005fe0000)
    tenured generation   total 10240K, used 210K [0x0000000005fe0000, 0x00000000069e0000, 0x00000000069e0000)
    the space 10240K,   2% used [0x0000000005fe0000, 0x0000000006014a18, 0x0000000006014c00, 0x00000000069e0000)
    compacting perm gen  total 21248K, used 3016K [0x00000000069e0000, 0x0000000007ea0000, 0x000000000bde0000)
    the space 21248K,  14% used [0x00000000069e0000, 0x0000000006cd2398, 0x0000000006cd2400, 0x0000000007ea0000)
    No shared spaces configured.</code></pre><p>内存回收日志中包含<code>“4603K-&gt;210K”</code>，意味着虚拟机并没有因为这两个对象互相引用就放弃回收它们，这也从侧面说明了Java虚拟机并不是通过引用计数算法来判断对象是否存活的。</p>
<h4 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h4><p>当前主流的商用程序语言（Java、C#，上溯至前面提到的古老的Lisp）的内存管理子系统，都是通过可达性分析（Reachability Analysis）算法来判定对象是否存活的。这个算法的基本思路:</p>
<blockquote>
<p>通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GCRoots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-1.jpg" alt="GC Roots 示意图"></p>
<p>在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：</p>
<blockquote>
<p>（1）在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。<br>（2）在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。<br>（3）在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。<br>（4）在本地方法栈中JNI（即通常所说的Native方法）引用的对象。<br>（5）Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。<br>（6）所有被同步锁（synchronized关键字）持有的对象。<br>（7）反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>
</blockquote>
<p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。</p>
<h4 id="3-对象引用及分类"><a href="#3-对象引用及分类" class="headerlink" title="3. 对象引用及分类"></a>3. 对象引用及分类</h4><p>在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为<code>强引用（Strongly Re-ference）</code>、<code>软引用（Soft Reference）</code>、<code>弱引用（Weak Reference）</code>和<code>虚引用（PhantomReference）</code>4种，这4种引用强度依次逐渐减弱。可以简写成：</p>
<pre><code>强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</code></pre><p>（1）强引用（Strongly Re-ference）</p>
<blockquote>
<p>强引用是最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似<code>“Object obj=new Object()”</code>这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>
</blockquote>
<p>（2）软引用（Soft Reference）</p>
<blockquote>
<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2版之后提供了<code>SoftReference</code>类来实现软引用。</p>
</blockquote>
<p>（3）弱引用（Weak Reference）</p>
<blockquote>
<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生为止。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了<code>WeakReference</code>类来实现弱引用。</p>
</blockquote>
<p>（4）虚引用（PhantomReference）</p>
<blockquote>
<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了<code>PhantomReference</code>类来实现虚引用。</p>
</blockquote>
<h4 id="4-是生是死？"><a href="#4-是生是死？" class="headerlink" title="4. 是生是死？"></a>4. 是生是死？</h4><blockquote>
<p>在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。</p>
</blockquote>
<p>如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。这里所说的“执行”是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的finalize()方法执行缓慢，或者更极端地发生了死循环，将很可能导致F-Queue队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。</p>
<p>finalize()方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的要被回收了。</p>
<p>书中代码示例：</p>
<pre><code>/**
 * 此代码演示了两点：
 * 1.对象可以在被GC时自我拯救。
 * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次
 */
public class FinalizeEscapeGC {

    public static FinalizeEscapeGC SAVE_HOOK = null;

    public void isAlive() {
        System.out.println(&quot;yes, i am still alive :)&quot;);
    }

    @Override
    protected void finalize() throws Throwable {
        super.finalize();
        System.out.println(&quot;finalize method executed!&quot;);
        FinalizeEscapeGC．SAVE_HOOK = this;
    }

    public static void main(String[] args) throws Throwable {
        SAVE_HOOK = new FinalizeEscapeGC();

        //对象第一次成功拯救自己
        SAVE_HOOK = null;
        System.gc();
        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它
        Thread.sleep(500);
        if (SAVE_HOOK != null) {
            SAVE_HOOK.isAlive();
        } else {
            System.out.println(&quot;no, i am dead :(&quot;);
        }

        // 下面这段代码与上面的完全相同，但是这次自救却失败了
        SAVE_HOOK = null;
        System.gc();
        // 因为Finalizer方法优先级很低，暂停0.5秒，以等待它
        Thread.sleep(500);
        if (SAVE_HOOK != null) {
            SAVE_HOOK.isAlive();
        } else {
            System.out.println(&quot;no, i am dead :(&quot;);
        }
    }
}</code></pre><p>运行结果：</p>
<pre><code>finalize method executed!
yes, i am still alive :)
no, i am dead :(</code></pre><p>结论</p>
<blockquote>
<p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行。</p>
</blockquote>
<h4 id="5-回收方法区"><a href="#5-回收方法区" class="headerlink" title="5. 回收方法区"></a>5. 回收方法区</h4><blockquote>
<p>在Java堆中，尤其是在新生代中，对常规应用进行一次垃圾收集通常可以回收70%至99%的内存空间，方法区回收条件苛刻，回收成果极小。</p>
</blockquote>
<p>方法区的垃圾收集主要回收两部分内容：废弃的常量，不再使用的类型。<br>（1）废弃的常量</p>
<blockquote>
<p>回收废弃常量与回收Java堆中的对象非常类似。举个常量池中字面量回收的例子，假如一个字符串“java”曾经进入常量池中，但是当前系统又没有任何一个字符串对象的值是“java”，换句话说，已经没有任何字符串对象引用常量池中的“java”常量，且虚拟机中也没有其他地方引用这个字面量。如果在这时发生内存回收，而且垃圾收集器判断确有必要的话，这个“java”常量就将会被系统清理出常量池。常量池中其他类（接口）、方法、字段的符号引用也与此类似。</p>
</blockquote>
<p>系统和虚拟机中均没有引用改常量即可。</p>
<p>（2）不再使用的类型</p>
<p>需要同时满足下面三个条件:<br>A. 该类所有的实例都已经被回收，Java堆中不存在该类及其任何派生子类的实例<br>B. 加载该类的类加载器已经被回收。（难达成）<br>C. 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>对象生死</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之垃圾收集器算法</title>
    <url>/posts/50b49e8d.html</url>
    <content><![CDATA[<h2 id="jvm-垃圾收集算法"><a href="#jvm-垃圾收集算法" class="headerlink" title="jvm 垃圾收集算法"></a>jvm 垃圾收集算法</h2><p>垃圾收集算法基本分类：<br>（1）“引用计数式垃圾收集”（Reference Counting GC）—直接垃圾收集<br>（2）“追踪式垃圾收集”（Tracing GC）—间接垃圾收集</p>
<h3 id="1-分代收集理论"><a href="#1-分代收集理论" class="headerlink" title="1. 分代收集理论"></a>1. 分代收集理论</h3><p>1）弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。<br>2）强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消亡。<br>3）跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。</p>
<p>常用名词：</p>
<blockquote>
<ul>
<li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ul>
<li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li>
<li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收-集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。</li>
<li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。</li>
</ul>
</li>
<li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li>
</ul>
</blockquote>
<h3 id="2-标记-清除算法（Mark-Sweep）"><a href="#2-标记-清除算法（Mark-Sweep）" class="headerlink" title="2. 标记-清除算法（Mark-Sweep）"></a>2. 标记-清除算法（Mark-Sweep）</h3><p>最早出现也是最基础的垃圾收集算法是“标记-清除”（Mark-Sweep）算法。</p>
<blockquote>
<p>算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-mark-sweep.jpg" alt="Serial收集器运行示意图"></p>
<p>主要缺点:<br>（1）执行效率不稳定，随着对象增加执行效率降低。</p>
<blockquote>
<p>如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低；</p>
</blockquote>
<p>（2）内存空间碎片化问题，遇到较大对象男分配，重新GC。</p>
<blockquote>
<p>第二个是内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>
</blockquote>
<h3 id="3-标记-复制算法（Semispace-Copying）"><a href="#3-标记-复制算法（Semispace-Copying）" class="headerlink" title="3. 标记-复制算法（Semispace Copying）"></a>3. 标记-复制算法（Semispace Copying）</h3><p>标记-复制算法常被简称为复制算法。为了解决标记-清除算法面对大量可回收对象时执行效率低的问题。1969年Fenichel提出了一种称为“半区复制”（Semispace Copying）的垃圾收集算法：</p>
<blockquote>
<p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p>
</blockquote>
<p>优点：</p>
<p>（1）实现简单，运行高效。<br>（2）分配内存时也就不用考虑有空间碎片的复杂情况，只要移动堆顶指针，按顺序分配即可</p>
<p>缺点：</p>
<p>（1）如果内存中多数对象都是存活的，这种算法将会产生大量的内存间复制的开销。<br>（2）将可用内存缩小为了原来的一半。</p>
<p>![Serial收集器运行示意图](/images/jvm-images/jvm-gc-Semispace Copying.jpg)</p>
<blockquote>
<p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代。<br>在1989年，Andrew Appel针对具备“朝生夕灭”特点的对象，提出了一种更优化的半区复制分代策略，现在称为“Appel式回收”。HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局。</p>
<p>Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间（HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1）每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。</p>
<p>当复制目标的Survivor空间不足以容纳一次Minor GC之后存活的对象时，采用一种分配担保策略：多出来的对象直接进入老年代。 </p>
</blockquote>
<h3 id="4-标记-整理算法（Mark-Compact）"><a href="#4-标记-整理算法（Mark-Compact）" class="headerlink" title="4. 标记-整理算法（Mark-Compact）"></a>4. 标记-整理算法（Mark-Compact）</h3><blockquote>
<p>不同于针对新生代的复制算法，针对老年代的特点，1974年Edward Lueders提出了另外一种有针对性的“标记-整理”（Mark-Compact）算法。其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。</p>
</blockquote>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-Mark-Compact.jpg" alt="Parallel Scavenge收集器运行示意图"></p>
<p>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动式的。</p>
<p>优缺点：</p>
<blockquote>
<p>如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行（Stop The World）。</p>
<p>如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。</p>
<p>是否移动对象都存在弊端，移动则内存回收时会更复杂，不移动则内存分配时会更复杂。从垃圾收集的停顿时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿，但是从整个程序的吞吐量来看，移动对象会更划算。此语境中，吞吐量的实质是赋值器（Mutator，可以理解为使用垃圾收集的用户程序，本书为便于理解，多数地方用“用户程序”或“用户线程”代替）与收集器的效率总和。即使不移动对象会使得收集器的效率提升一些，但因内存分配和访问相比垃圾收集频率要高得多，这部分的耗时增加，总吞吐量仍然是下降的。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>垃圾收集器算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM LLGC：ZGC</title>
    <url>/posts/e3d9aed7.html</url>
    <content><![CDATA[<h2 id="jvm低延迟垃圾收集器-ZGC"><a href="#jvm低延迟垃圾收集器-ZGC" class="headerlink" title="jvm低延迟垃圾收集器 ZGC"></a>jvm低延迟垃圾收集器 ZGC</h2><p>EN： JVM Low-Latency Garbage Collector : Z Garbage Collector</p>
<h3 id="一-、ZGC简介"><a href="#一-、ZGC简介" class="headerlink" title="一 、ZGC简介"></a>一 、ZGC简介</h3><p>一款在JDK 11中新加入的具有实验性质[插图]的低延迟垃圾收集器，是由Oracle公司研发的。2018年Oracle创建了JEP 333将ZGC提交给OpenJDK。</p>
<h5 id="主要目标："><a href="#主要目标：" class="headerlink" title="主要目标："></a>主要目标：</h5><p>尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p>
<p>演变简史：</p>
<p>Azul VM上的PGC（Pauseless GC） : </p>
<p>​    实现了标记和整理阶段都全程与用户线程并发运行的垃圾收集。</p>
<p>Zing VM上的C4 （Concurrent Continuously Compacting Collector） ：</p>
<p>​     在PGC之上增加了分代收集支持，大幅提升了收集器能够承受的对象分配速度。Azul的C4收集器实现了分代收集后，能够应对的对象分配速率就比不分代的PGC收集器提升了十倍之多。</p>
<p>PGC——》C4——》ZGC</p>
<p>特征简介：</p>
<p>ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。</p>
<h3 id="二-ZGC主要特征："><a href="#二-ZGC主要特征：" class="headerlink" title="二 ZGC主要特征："></a>二 ZGC主要特征：</h3><p>（1）以低延迟为首要目标。</p>
<p>（2）暂不支持分代的，无跨代引用。</p>
<p>（3）基于Region的堆内存布局。</p>
<p>（4）染色指针和读屏障实现并发整理算法。Colored Pointer。</p>
<p>（5）内存多重映射技术。</p>
<p>（6）支持“NUMA-Aware”的内存分配。(NUMA非统一内存访问架构)</p>
<h3 id="三-ZG内存布局"><a href="#三-ZG内存布局" class="headerlink" title="三  ZG内存布局"></a>三  ZG内存布局</h3><p>ZGC在x64硬件平台下的内存布局如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-2.jpg" alt="ZGC的堆内存布局(彩图)"></p>
<p>ZGC的Region / Page / ZPage 称为 Size Groups ,</p>
<p>大致分三种类：</p>
<p>（A）小型Region（Small Region）：容量固定为2MB，用于放置小于256KB的小对象。</p>
<p>（B）中型Region（Medium Region）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。</p>
<p>（C）大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。实际容量完全有可能小于中型Region，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配。</p>
<h3 id="四-并发整理实现：染色指针"><a href="#四-并发整理实现：染色指针" class="headerlink" title="四 并发整理实现：染色指针"></a>四 并发整理实现：染色指针</h3><p>染色指针技术（Colored Pointer   、Tag Pointer或者Version Pointer）是ZGC的标志性设计。</p>
<p>染色指针是一种直接将少量额外的信息存储在指针上的技术。在ZGC中使用染色指针直接把标记信息记在引用对象的指针上。</p>
<p>前提条件：内存多重映射（Multi-Mapping）技术。</p>
<p>染色指针带来的不利：</p>
<p>​    染色指针有4TB的内存限制，不能支持32位平台，不能支持压缩指针。</p>
<p>染色指针带来的优势：</p>
<p>​    （1）染色指针可以使某个Region的存活对象被移走之后，该Region立即就能够被释放和重用掉。</p>
<p>​    （2）染色指针可以大幅减少在垃圾收集过程中内存屏障的使用数量。只使用了读屏障（染色指针+无分代引用）</p>
<p>​    （3）染色指针可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据，以便日后进一步提高性能。</p>
<h3 id="五-ZGC收集工作过程"><a href="#五-ZGC收集工作过程" class="headerlink" title="五 ZGC收集工作过程"></a>五 ZGC收集工作过程</h3><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-job.jpg" alt="ZGC收集工作过程"></p>
<p>ZGC收集工作全部四个阶段都是可以并发执行的。仅在两个阶段中间会存在短暂的停顿小阶段。</p>
<h4 id="1-并发标记（Concurrent-Mark）"><a href="#1-并发标记（Concurrent-Mark）" class="headerlink" title="1 并发标记（Concurrent Mark）"></a>1 并发标记（Concurrent Mark）</h4><p>（A）遍历对象图做可达性分析的阶段。（初始标记、最终标记）</p>
<p>（B）标记过程是面向全堆的，有短暂停顿。</p>
<p>（C）ZGC的标记不标记对象，会更新染色指针中的Marked 0、Marked 1标志位。</p>
<h4 id="2-并发预备重分配（Concurrent-Prepare-for-Relocate）"><a href="#2-并发预备重分配（Concurrent-Prepare-for-Relocate）" class="headerlink" title="2 并发预备重分配（Concurrent Prepare for Relocate）"></a>2 并发预备重分配（Concurrent Prepare for Relocate）</h4><p>（A）统计要清理的Region/ size groups, 组成重分配集（Relocation Set）</p>
<p>（B）统计范围是面向全堆的。</p>
<p>（C）在JDK 12的ZGC中开始支持的类卸载以及弱引用的处理，也是在这个阶段中完成的。</p>
<h4 id="3-并发重分配（Concurrent-Relocate）"><a href="#3-并发重分配（Concurrent-Relocate）" class="headerlink" title="3 并发重分配（Concurrent Relocate）"></a>3 并发重分配（Concurrent Relocate）</h4><p>（A）是ZGC执行过程的核心阶段。</p>
<p>（B）把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表（Forward Table），记录从旧对象到新对象的转向关系。</p>
<p>（C）指针自愈（Self-Healing）</p>
<p>因为染色指针的支持，ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”（Self-Healing）能力。</p>
<pre><code>Shenandoah转发指针与ZGC染色指针比较：
    Shenandoah的Brooks转发指针每次都要转发。
    ZGC的染色指针可以指针自愈，只转发一次。</code></pre><h4 id="4-并发重映射（Concurrent-Remap）"><a href="#4-并发重映射（Concurrent-Remap）" class="headerlink" title="4 并发重映射（Concurrent Remap）"></a>4 并发重映射（Concurrent Remap）</h4><p>（A）修正整个堆中指向重分配集中旧对象的所有引用。（类似Shenandoah的引用更新）</p>
<p>（B）重映射清理这些旧引用的主要目的是为了不变慢，还可以释放转发表。</p>
<p>（C）并发重映射阶段要做的工作合并到下一次垃圾收集循环中的并发标记阶段里去完成。</p>
<h3 id="六-ZGC优缺点"><a href="#六-ZGC优缺点" class="headerlink" title="六 ZGC优缺点"></a>六 ZGC优缺点</h3><p>1.（与其他收集器相比）优点：</p>
<p>（1）动态的Region布局。</p>
<p>（2）无记忆集，不占大量内存。</p>
<p>（3）无分代，无卡表，无写屏障。（染色指针）</p>
<p>（4）支持“NUMA-Aware”的内存分配。NUMA（Non-Uniform Memory Access，非统一内存访问架构）是一种为多处理器或者多核处理器的计算机所设计的内存架构</p>
<p>2.（与其他收集器相比）缺点：</p>
<p>（1）堆空间较大时，并发收集的周期较长，浮动垃圾多，对象分配速率不会太高。</p>
<p>（2）需要较大的堆（Heap）容量。</p>
<h3 id="七-性能及前景"><a href="#七-性能及前景" class="headerlink" title="七 性能及前景"></a>七 性能及前景</h3><p>目前处于测试阶段。ZGC与Parallel Scavenge、G1三款收集器通过SPECjbb 2015 的测试结果如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-compare1.jpg" alt="ZGC的吞吐量测试"></p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-zgc-compare2.jpg" alt="ZGC的停顿时间测试"></p>
<p>（1）ZGC的“弱项”吞吐量</p>
<p>在ZGC的“弱项”吞吐量方面，以低延迟为首要目标的ZGC已经达到了以高吞吐量为目标Parallel Scavenge的99%，直接超越了G1。如果将吞吐量测试设定为面向SLA（Service LevelAgreements）应用的“Critical Throughput”的话[插图]，ZGC的表现甚至还反超了ParallelScavenge收集器。</p>
<p>（2）ZGC的强项停顿时间</p>
<p>ZGC的强项停顿时间测试上，它就毫不留情地与Parallel Scavenge、G1拉开了两个数量级的差距。不论是平均停顿，还是95%停顿、99%停顿、99.9%停顿，抑或是最大停顿时间，ZGC均能毫不费劲地控制在十毫秒之内。ZGC的停顿时间测试图中a）是ZGC的柱状条，b）纵坐标从线性尺度调整成对数尺度。</p>
<p>（3）将会成为服务端、大内存、低延迟应用的首选收集器的有力竞争者。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM LLGC：Shenandoah</title>
    <url>/posts/f8161112.html</url>
    <content><![CDATA[<h2 id="JVM低延迟垃圾收集器：Shenandoah"><a href="#JVM低延迟垃圾收集器：Shenandoah" class="headerlink" title="JVM低延迟垃圾收集器：Shenandoah"></a>JVM低延迟垃圾收集器：Shenandoah</h2><p>EN： JVM Low-Latency Garbage Collector : Shenandoah</p>
<h3 id="一-、Shenandoah简介"><a href="#一-、Shenandoah简介" class="headerlink" title="一 、Shenandoah简介"></a>一 、Shenandoah简介</h3><blockquote>
<p>一款不由Oracle（包括以前的Sun）公司的虚拟机团队所领导开发的HotSpot垃圾收集器。只有OpenJDK才会包含，而OracleJDK里反而不存在的收集器，“免费开源版”比“收费商业版”功能更多。</p>
</blockquote>
<blockquote>
<p>2014年RedHat把Shenandoah贡献给了OpenJDK，并推动它成为OpenJDK 12的正式特性之一，也就是后来的JEP 189。</p>
</blockquote>
<p>目标：<strong>实现一种能在任何堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的垃圾收集器。</strong></p>
<h3 id="二、Shenandoah特征及实现思路："><a href="#二、Shenandoah特征及实现思路：" class="headerlink" title="二、Shenandoah特征及实现思路："></a>二、Shenandoah特征及实现思路：</h3><p><strong>Shenandoah主要特征</strong>：</p>
<p>（1）基于Region的堆内存布局,去除传统分代。</p>
<p>（2）回收策略优先处理回收价值最大的Region</p>
<p>（3）支持并发的整理算法。</p>
<p><strong>Shenandoah收集器的实现思路</strong>：</p>
<p>（1）基于Region的堆内存布局，默认不使用分代收集，<code>(相比G1的记忆集（RemberSet）处理跨代指针时维护消耗)</code>改用名为“连接矩阵”（Connection Matrix）的全局数据结构来记录跨Region的引用关系。降低了伪共享问题的发生概率。</p>
<blockquote>
<p>连接矩阵可以简单理解为一张二维表格，如果RegionN有对象指向Region M，就在表格的N行M列中打上一个标记，如图3-15所示，如果Region 5中的对象Baz引用了Region 3的Foo，Foo又引用了Region 1的Bar，那连接矩阵中的5行3列、3行1列就应该被打上标记。在回收时通过这张表格就可以得出哪些Region之间产生了跨代引用。</p>
</blockquote>
<p>（2）使用转发指针（Brooks Pointer）和读写屏障来实现与用户线程并发的整理算法。</p>
<blockquote>
<p>转发指针是在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己。<br>当对象拥有了一份新的副本时，只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。这样只要旧对象的内存仍然存在，未被清理掉，虚拟机内存中所有通过旧引用地址访问的代码便仍然可用，都会被自动转发到新对象上继续工作。</p>
</blockquote>
<h3 id="三、Shenandoah收集器的工作过程（九阶段划分）："><a href="#三、Shenandoah收集器的工作过程（九阶段划分）：" class="headerlink" title="三、Shenandoah收集器的工作过程（九阶段划分）："></a>三、Shenandoah收集器的工作过程（九阶段划分）：</h3><h4 id="1-始标记（Initial-Marking）"><a href="#1-始标记（Initial-Marking）" class="headerlink" title="1. 始标记（Initial Marking）"></a>1. 始标记（Initial Marking）</h4><p>​    （A）与G1一样，首先标记与GC Roots直接关联的对象.</p>
<p>​    （B）需要“Stop The World”，有停顿，但停顿时间与堆大小无关，只与GC Roots的数量相关。</p>
<h4 id="2-并发标记（Concurrent-Marking）"><a href="#2-并发标记（Concurrent-Marking）" class="headerlink" title="2. 并发标记（Concurrent Marking）"></a>2. 并发标记（Concurrent Marking）</h4><p>​    （A）<strong>重要的并发过程之一。</strong></p>
<p>​    （B）与G1一样，遍历对象图，标记出全部可达的对象。可达性分析。</p>
<p>​    （C）与用户线程并发执行，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。</p>
<h4 id="3-最终标记（Final-Marking）"><a href="#3-最终标记（Final-Marking）" class="headerlink" title="3. 最终标记（Final Marking）"></a>3. 最终标记（Final Marking）</h4><p>（A）与G1一样，处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集（Collection Set）。</p>
<p>​（B）会有一小段短暂的停顿。</p>
<h4 id="4-并发清理（Concurrent-Cleanup）"><a href="#4-并发清理（Concurrent-Cleanup）" class="headerlink" title="4. 并发清理（Concurrent Cleanup）"></a>4. 并发清理（Concurrent Cleanup）</h4><p>​    （A）清理那些整个区域内连一个存活对象都没有找到的Region（这类Region被称为Immediate Garbage Region）。</p>
<h4 id="5-并发回收（Concurrent-Evacuation）"><a href="#5-并发回收（Concurrent-Evacuation）" class="headerlink" title="5. 并发回收（Concurrent Evacuation）"></a>5. 并发回收（Concurrent Evacuation）</h4><p>​    （A）<strong>重要的并发过程之一。</strong>并发回收阶段是Shenandoah与之前HotSpot中其他收集器的核心差异。</p>
<p>​    （B）Shenandoah要把回收集里面的存活对象先复制一份到其他未被使用的Region之中。</p>
<p>  （C）使用<strong>读屏障</strong>和被称为”Brooks Pointers”的<strong>转发指针</strong>实现并发过程，并发回收阶段运行的时间长短取。</p>
<h4 id="6-初始引用更新（Initial-Update-Reference）"><a href="#6-初始引用更新（Initial-Update-Reference）" class="headerlink" title="6. 初始引用更新（Initial Update Reference）"></a>6. 初始引用更新（Initial Update Reference）</h4><p>​    （A）并发回收阶段复制对象结束后，把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新。</p>
<p>​    （B）此阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已。</p>
<p>​    （B）初始引用更新时间很短，会产生一个非常短暂的停顿。</p>
<h4 id="7-并发引用更新（Concurrent-Update-Reference）"><a href="#7-并发引用更新（Concurrent-Update-Reference）" class="headerlink" title="7. 并发引用更新（Concurrent Update Reference）"></a>7. 并发引用更新（Concurrent Update Reference）</h4><p>​    （A）<strong>重要的并发过程之一。</strong></p>
<p>​    （B）真正开始进行引用更新操作，与用户线程一起并发的，时间长短取决于内存中涉及的引用数量的多少。    </p>
<p>​    （C）并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。</p>
<h4 id="8-最终引用更新（Final-Update-Reference）"><a href="#8-最终引用更新（Final-Update-Reference）" class="headerlink" title="8. 最终引用更新（Final Update Reference）"></a>8. 最终引用更新（Final Update Reference）</h4><p>​    （A）解决了堆中的引用更新后，还要修正存在于GCRoots中的引用。</p>
<p>​    （B）此阶段是Shenandoah的最后一次停顿，停顿时间只与GC Roots的数量相关。</p>
<h4 id="9-并发清理（Concurrent-Cleanup）"><a href="#9-并发清理（Concurrent-Cleanup）" class="headerlink" title="9. 并发清理（Concurrent Cleanup）"></a>9. 并发清理（Concurrent Cleanup）</h4><p>经过并发回收和引用更新之后，整个回收集中所有的Region已再无存活对象，这些Region都变成Immediate Garbage Regions了，最后再调用一次并发清理过程来回收这些Region的内存空间，供以后新对象分配使用。</p>
<p> Shenandoah收集器的重要的三个并发过程：</p>
<ol>
<li>并发标记</li>
<li>并发回收</li>
<li>并发引用更新</li>
</ol>
<p>Shenandoah收集器的工作流程图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah-do-job.png" alt="Shenandoah收集器的工作过程"></p>
<p>图片来源：<a href="https://shipilev.net/talks/devoxx-Nov2017-shenandoah.pdf" target="_blank" rel="noopener">《Shenandoah GC Part I: The Garbage Collector That Could》</a></p>
<p>说明：</p>
<p>黄色区域代表的是被选入回收集的Region。</p>
<p>绿色部分就代表还存活的对象。</p>
<p>蓝色区域就是用户线程可以用来分配对象的内存Region。</p>
<h3 id="四、GC收集器比较"><a href="#四、GC收集器比较" class="headerlink" title="四、GC收集器比较"></a>四、GC收集器比较</h3><h4 id="1、Shenandoah-与其他收集器并发比较"><a href="#1、Shenandoah-与其他收集器并发比较" class="headerlink" title="1、Shenandoah 与其他收集器并发比较"></a>1、Shenandoah 与其他收集器并发比较</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah.png" alt="Shenandoah与其他垃圾收集器比较"></p>
<p>图片来源：<a href="https://shipilev.net/talks/devoxx-Nov2017-shenandoah.pdf" target="_blank" rel="noopener">《Shenandoah GC Part I: The Garbage Collector That Could》</a></p>
<p>黄色：表示必须挂起用户线程</p>
<p>绿色：表示收集器线程与用户线程并发执行。</p>
<p>结论：</p>
<p>（1）CMS和G1之前的全部收集器，其工作的所有步骤都会产生“Stop TheWorld”式的停顿；</p>
<p>（2）CMS和G1分别使用增量更新和原始快照(SATB)技术，实现了标记阶段的并发，不会因管理的堆内存变大，要标记的对象变多而导致停顿时间随之增长。但是对于标记阶段之后的处理，仍未得到妥善解决。</p>
<p>（3）CMS使用标记-清除算法，虽然避免了整理阶段收集器带来的停顿，但是清除算法不论如何优化改进，在设计原理上避免不了空间碎片的产生，随着空间碎片不断淤积最终依然逃不过“Stop The World”的命运。</p>
<p>（4）G1虽然可以按更小的粒度进行回收，从而抑制整理阶段出现时间过长的停顿，也有暂停。</p>
<p>（5）Shenandoah只有初始标记、最终标记这些阶段有短暂的停顿，这部分停顿的时间基本上是固定的，与堆的容量、堆中对象的数量没有正比例关系。</p>
<h4 id="2、Shenandoah-与G1比较"><a href="#2、Shenandoah-与G1比较" class="headerlink" title="2、Shenandoah 与G1比较"></a>2、Shenandoah 与G1比较</h4><table>
    <th>
        <td width="46%">Shenandoah</td>
        <td width="46%">G1（Garbage First）</td>
    </th>
    <tr>
    <td rowspan="3">不同</td>
    <td >Shenandoah（目前）是默认不使用分代收集的,不会有专门的新生代Region或者老年代Region的存在，没有实现分代。
     </td>
    <td >G1仍然保留新生代和老年代概况，只是变成Region区组成的逻辑连续的动态集合。
     </td>
  </tr>
<tr>
    <td >使用“连接矩阵”（Connection Matrix）的全局数据结构来记录跨Region的引用关系。</td>
    <td >使用记忆集（Rember Set）避免全堆作为GC Roots扫描,每个Region都维护有自己的记忆集。</td>
  </tr>
<tr>
    <td >Shenandoah通过读屏障和被称为“Brooks Pointers”的转发指针实现并发回收,支持与用户线程并发。 </td>
    <td >G1的回收阶段是可以多线程并行的，但却不能与用户线程并发。 </td>
  </tr>
<tr>
    <td>相同</td>
    <td colspan="2">（1）都是基于Region的堆内存布局，都有用于存放大对象的Humongous Region<br/>（2）并发回收思路高度一致，<br/>（3）默认的回收策略都是优先处理回收价值最大的Region<br/>（4） 都采用标记-整理，标记-复制算法回收。<br/></td>
   </tr>
</table>




<h3 id="四、相关概念"><a href="#四、相关概念" class="headerlink" title="四、相关概念"></a>四、相关概念</h3><p><strong>写屏障</strong>：<br>    在赋值操作前后，加入一些处理（类似针对写操作进行AOP的处理）<br>    目的通常是为了记录对象引用的变动情况</p>
<p><strong>读屏障</strong>：</p>
<p>​   在读值操作前后，加入一些处理（类似针对读操作进行AOP的处理）<br>   目的通常是为了读取对象更新引用后的原有直。</p>
<blockquote>
<p>说明：读写屏障没有找到相关科学定义，写屏障的理解来自网络，读屏障是根据写屏障的理解暂作说明的，如果不当，欢迎指正。</p>
</blockquote>
<p><strong><span id="jump">指针转发</span></strong> Brooks Pointer（Forwarding Pointer / Indirection Pointer）</p>
<p>相关历史简介：</p>
<p>1984年，Brooks提出使用转发指针来实现对象移动与用户程序并发的一种解决方案。</p>
<p>Brooks提出的新方案不需要用到内存保护陷阱，而是在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己。当对象拥有了一份新的副本时，只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。这样只要旧对象的内存仍然存在，未被清理掉，虚拟机内存中所有通过旧引用地址访问的代码便仍然可用，都会被自动转发到新对象上继续工作，</p>
<p>指针转发如图：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-shen-andoah-brooks-pointer.jpg" alt="指针转发示意图"></p>
<blockquote>
<p>Brooks形式的转发指针在设计上决定了它是必然会出现多线程竞争问题的，如果收集器线程与用户线程发生的只是并发读取，那无论读到旧对象还是新对象上的字段，返回的结果都应该是一样的，这个场景还可以有一些“偷懒”的处理余地；但如果发生的是并发写入，就一定必须保证写操作只能发生在新复制的对象上，而不是写入旧对象的内存中。以下三件事情并发进行时：</p>
</blockquote>
<p>1）收集器线程复制了新的对象副本；<br>2）用户线程更新对象的某个字段；<br>3）收集器线程更新转发指针的引用值为新副本地址。</p>
<blockquote>
<p>如果不做任何保护措施，让事件2在事件1、事件3之间发生的话，将导致的结果就是用户线程对对象的变更发生在旧对象上，所以这里必须针对转发指针的访问操作采取同步措施，让收集器线程或者用户线程对转发指针的访问只有其中之一能够成功，另外一个必须等待，避免两者交替进行。实际上Shenandoah收集器是通过比较并交换（Compare And Swap，CAS）操作来保证并发时对象的访问正确性的。</p>
</blockquote>
<blockquote>
<p>CAS：compare and swap，解决多线程并行情况下使用锁造成性能损耗的一种机制，CAS操作包含三个操作数——内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。CAS有效地说明了“我认为位置V应该包含值A；如果包含该值，则将B放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。</p>
</blockquote>
<p><strong>转发指针和句柄定位比较</strong>：</p>
<table>
    <th>
        <td>转发指针</td>
        <td>句柄定位</td>
    </th>
    <tr>
        <td rowspan="2">不同</td>
        <td>分散存放在每一个对象头前面</td>
        <td>统一存储在专门的句柄池中</td>
    </tr>
    <tr><td>出现多线程竞争问题</td>
    <td></td>
</tr>
<tr>
    <td>相同</td>
    <td colspan="2">间接性的对象访问方式；对象访问会带来一次额外的转向开销</td>
</tr>
    </table>


<p><strong>内存保护陷阱</strong>扩展了解：</p>
<p>在此之前，实现类似的并发操作，通常是在被移动对象原有的内存上设置保护陷阱（Memory Protection Trap），一旦用户程序访问到归属于旧对象的内存空间就会产生自陷中段，进入预设好的异常处理器中，再由其中的代码逻辑把访问转发到复制后的新对象上。虽然确实能够实现对象移动与用户线程并发，但是如果没有操作系统层面的直接支持，这种方案将导致用户态频繁切换到核心态。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm之垃圾收集器</title>
    <url>/posts/d01dbbb1.html</url>
    <content><![CDATA[<h2 id="jvm-垃圾收集器"><a href="#jvm-垃圾收集器" class="headerlink" title="jvm 垃圾收集器"></a>jvm 垃圾收集器</h2><h2 id="一-关于垃圾收集器"><a href="#一-关于垃圾收集器" class="headerlink" title="一 关于垃圾收集器"></a>一 关于垃圾收集器</h2><blockquote>
<p>垃圾收集器是垃圾回收算法（标记-清除算法、标记-复制算法、标记-整理算法、半复制算法）的具体实现，不同商家、不同版本的JVM所提供的垃圾收集器可能会有很在差别，本文主要介绍HotSpot虚拟机中的垃圾收集器。</p>
</blockquote>
<p>相关术语</p>
<h3 id="1-并行与并发"><a href="#1-并行与并发" class="headerlink" title="1. 并行与并发"></a>1. 并行与并发</h3><table>
<thead>
<tr>
<th>并行（Parallel）</th>
<th>并发（Concurrent）</th>
</tr>
</thead>
<tbody><tr>
<td>指多条垃圾收集线程同一时间并行协同工作，此时用户线程仍然处于等待状态；如ParNew、Parallel Scavenge、Parallel Old；</td>
<td>指用户线程与垃圾收集线程同时都在执行（但不一定是并行的，可能会交替执行）；用户程序在继续运行，未被冻结，程序仍然能响应服务请求。垃圾收集程序线程占用系统资源。如CMS、G1（也有并行）；</td>
</tr>
</tbody></table>
<h3 id="2-部分收集和整堆收集"><a href="#2-部分收集和整堆收集" class="headerlink" title="2. 部分收集和整堆收集"></a>2. 部分收集和整堆收集</h3><p>（1）部分收集（Partial GC）：</p>
<p>​    指目标不是完整收集整个Java堆的垃圾收集。主要三种：</p>
<p>​    A. 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。<br>​    B. 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。</p>
<p>​    C. 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。    </p>
<p>（2）整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</p>
<blockquote>
<p><strong>注意</strong>：“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，请按资料上下文区分到底是指老年代的收集还是整堆收集。因为有的Major GC表示老年代GC有的表示整堆GC。</p>
</blockquote>
<h3 id="3-收集器的指标"><a href="#3-收集器的指标" class="headerlink" title="3. 收集器的指标"></a>3. 收集器的指标</h3><p>收集器的指标一般体现在设计它的目的上，如：Parallel Scavenge收集器首要目标是吞吐量。</p>
<p>主要权衡指标有三个：</p>
<p>（A）低延迟</p>
<p>（B）吞吐量</p>
<p>（C）较小的内存占用</p>
<h2 id="二-Hotspot七种垃圾收集器"><a href="#二-Hotspot七种垃圾收集器" class="headerlink" title="二 Hotspot七种垃圾收集器"></a>二 Hotspot七种垃圾收集器</h2><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gcr-1.jpg" alt="常见的七种垃圾收集器"><br>（图片来自《深入理解java虚拟机:jvm高级特性与最佳实践 》第三版。JVM系列黑白图均来自电子书，彩图来自网络）</p>
<p>图中是七种作用于不同分代的收集器。<br>如果两个收集器之间存在连线，就说明它们可以搭配使用。<br>图中收集器所处的区域，则表示它是属于新生代收集器抑或是老年代收集器。<br>其中Serial Old作为CMS出现”Concurrent Mode Failure”失败的后备预案。</p>
<p>整理成表格如下：</p>
<table>
<thead>
<tr>
<th>收集区域</th>
<th>收集器</th>
</tr>
</thead>
<tbody><tr>
<td>新生代收集器</td>
<td>Serial、ParNew、Parallel Scavenge</td>
</tr>
<tr>
<td>老年代收集器</td>
<td>Serial Old、Parallel Old、CMS</td>
</tr>
<tr>
<td>整堆收集器</td>
<td>G1</td>
</tr>
</tbody></table>
<h3 id="1、Serial-收集器"><a href="#1、Serial-收集器" class="headerlink" title="1、Serial 收集器"></a>1、Serial 收集器</h3><p>Serial 串口，串行的意思。</p>
<blockquote>
<p>Serial收集器是一个单线程工作的收集器。是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效。（高效是指与其他收集器的单线程相比）</p>
</blockquote>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）针对新生代的收集器。<br>    （2）只会使用一个处理器或一条收集线程去完成垃圾收集工作，进行垃圾收集时，必须暂停其他所有工作线程，直到它收集结束。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-serial.jpg" alt="Serial收集器运行示意图"></p>
<h3 id="2、ParNew-收集器"><a href="#2、ParNew-收集器" class="headerlink" title="2、ParNew 收集器"></a>2、ParNew 收集器</h3><p>ParNew收集器实质上是Serial收集器的多线程并行版本。其余的行为包括Serial收集器可用的所有控制参数（例如：<code>-XX：SurvivorRatio</code>、<code>-XX：PretenureSizeThreshold</code>、<code>-XX：HandlePromotionFailure</code>等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一致。二者共用许多代码。</p>
<h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）新生代收集器</p>
<p>​    （2）支持多线程并行收集。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-ParNew.jpg" alt="ParNew/Serial Old收集器运行示意图"></p>
<p>ParNew收集器是激活CMS后（使用-XX：+UseConcMarkSweepGC选项）的默认新生代收集器，也可以使用-XX：+/-UseParNewGC选项来强制指定或者禁用它。</p>
<h3 id="3、Parallel-Scavenge-收集器"><a href="#3、Parallel-Scavenge-收集器" class="headerlink" title="3、Parallel Scavenge 收集器"></a>3、Parallel Scavenge 收集器</h3><p>Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器。早期只能和Serial Old搭配。不能和CMS搭配。</p>
<p>目标：</p>
<p>希望达到一个可控制的吞吐量（Throughput）。</p>
<p>Parallel Scavenge收集器也经常被称作“吞吐量优先收集器”。</p>
<h4 id="特点：-2"><a href="#特点：-2" class="headerlink" title="特点："></a>特点：</h4><p>（1）新生代收集器，基于标记-复制算法实现</p>
<p>（2）能够多线程并行收集</p>
<p>（3）停顿-吞吐量的自适应的调节策略。可以设定目标让收集器自行调节。</p>
<p>（4）支持NUMA(非统一内存访问架构)内存分配</p>
<p>运行示意图：</p>
<p>![Parallel Scavenge / Parallel Old收集器运行示意图](/images/jvm-images/jvm-5-gc-Parallel-Scavenge-or-Parallel Old.jpg)</p>
<blockquote>
<p>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的<code>-XX：MaxGCPauseMillis</code>参数以及直接设置吞吐量大小的<code>-XX：GCTimeRatio</code>参数。</p>
</blockquote>
<blockquote>
<p><code>-XX：MaxGCPauseMillis</code>参数允许的值是一个大于0的毫秒数，收集器将尽力保证内存回收花费的时间不超过用户设定值。</p>
</blockquote>
<blockquote>
<p><code>-XX：GCTimeRatio</code>参数的值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1/(1+19)），默认值为99，即允许最大1%（即1/(1+99)）的垃圾收集时间。</p>
</blockquote>
<p>停顿-吞吐量的自适应的调节策略：</p>
<blockquote>
<p>Parallel Scavenge收集器还有一个参数<code>-XX：+UseAdaptiveSizePolicy</code>值得我们关注。这是一个开关参数，当这个参数被激活之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（<code>-XX：SurvivorRatio</code>）、晋升老年代对象大小（<code>-XX：PretenureSizeThreshold</code>）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。这种调节方式称为垃圾收集的自适应的调节策略（GC Ergonomics）.</p>
</blockquote>
<blockquote>
<p>把基本的内存数据设置好（如<code>-Xmx</code>设置最大堆），然后使用<code>-XX：MaxGCPauseMillis</code>参数（更关注最大停顿时间）或<code>-XX：GCTimeRatio</code>（更关注吞吐量）参数给虚拟机设立一个优化目标，那具体细节参数的调节工作就由虚拟机完成了。自适应调节策略也是Parallel Scavenge收集器区别于ParNew收集器的一个重要特性。</p>
</blockquote>
<h3 id="4、Serial-Old-收集器"><a href="#4、Serial-Old-收集器" class="headerlink" title="4、Serial Old  收集器"></a>4、Serial Old  收集器</h3><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。</p>
<h4 id="特点：-3"><a href="#特点：-3" class="headerlink" title="特点："></a>特点：</h4><p>（1）老年代收集器，</p>
<p>（2）单线程收集器，</p>
<p>（3）使用标记-整理算法。</p>
<p>使用环境：</p>
<p>客户端：主要供客户端模式下的HotSpot虚拟机使用。</p>
<p>服务端：（A）在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用；</p>
<p>​    （B）作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent ModeFailure时使用。</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-serial.jpg" alt="Serial/ Serial old 收集器运行示意图"></p>
<h3 id="5、Parallel-Old-收集器"><a href="#5、Parallel-Old-收集器" class="headerlink" title="5、Parallel Old 收集器"></a>5、Parallel Old 收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。这个收集器是直到JDK 6时才开始提供的。</p>
<h4 id="特点：-4"><a href="#特点：-4" class="headerlink" title="特点："></a>特点：</h4><p>同Parallel Scavenge收集器。</p>
<p>“吞吐量优先”收集器：</p>
<blockquote>
<p>在注重吞吐量或者处理器资源较为稀缺的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器这个组合。     </p>
</blockquote>
<p>![Parallel Scavenge / Parallel Old收集器运行示意图](/images/jvm-images/jvm-5-gc-Parallel-Scavenge-or-Parallel Old.jpg)</p>
<h3 id="6、CMS-收集器"><a href="#6、CMS-收集器" class="headerlink" title="6、CMS  收集器"></a>6、CMS  收集器</h3><p>CMS : Concurrent Mark Sweep</p>
<p>官方文档称之为：“并发低停顿收集器”（Concurrent Low Pause Collector）</p>
<h4 id="特点：-5"><a href="#特点：-5" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）以获取最短回收停顿时间为目标。</p>
<p>​    （2）基于标记-清除算法实现。</p>
<blockquote>
<p>关注服务的响应速度，希望系统停顿时间尽可能短,如B/S系统应用服务端，适合CMS收集器。</p>
</blockquote>
<p>CMS堆内存布局</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-cms.png" alt="Concurrent Mark Sweep收集器运行示意图"></p>
<h5 id="CMS收集器工作过程："><a href="#CMS收集器工作过程：" class="headerlink" title="CMS收集器工作过程："></a>CMS收集器工作过程：</h5><p>运行示意图如下</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-cms-workflow.jpg" alt="Concurrent Mark Sweep收集器运行示意图"></p>
<p>1）初始标记（CMS initial mark）</p>
<p>​    （A）标记一下GC Roots能直接关联到的对象，速度很快。</p>
<p>​    （B）有短暂停顿</p>
<p>2）并发标记（CMS concurrent mark）</p>
<p>​    （A）从GC Roots的直接关联对象开始遍历整个对象图的过程。</p>
<p>​    （B）该过程耗时较长，用户线程可以与垃圾收集线程一起并发运行</p>
<p>3）重新标记（CMS remark）</p>
<p>​    （A）修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。</p>
<p>​    （B）有停顿，比初始标记停顿时间稍长，比并发标记阶段的时间短。</p>
<p>4）并发清除（CMS concurrent sweep）</p>
<p>​    （A）清理删除掉标记阶段判断的已经死亡的对象。</p>
<p>​    （B）不需要移动存活对象，可以与用户线程同时并发执行。</p>
<h4 id="CMS收集器优缺点："><a href="#CMS收集器优缺点：" class="headerlink" title="CMS收集器优缺点："></a>CMS收集器优缺点：</h4><p>优点：</p>
<p>​    并发收集、低停顿</p>
<p>缺点：</p>
<p>​    （1）对处理器资源非常敏感，并发阶段线程运行占用资源。</p>
<p>​    （2）无法处理并发标记和并发清理阶段产生的“浮动垃圾”（Floating Garbage）。有可能出现“Con-current Mode Failure”失败进而导致另一次完全“Stop The World”的Full GC的产生。</p>
<p>​    （3）“标记-清除”算法实现带来的空间碎片问题。</p>
<blockquote>
<p><strong>浮动垃圾</strong>：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”</p>
</blockquote>
<p>因为浮动垃圾带来的问题怎么办？</p>
<blockquote>
<p>CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，必须预留一部分空间供并发收集时的程序运作使用。在JDK 5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在实际应用中老年代增长并不是太快，可以适当调高参数<code>-XX：CMSInitiatingOccu-pancyFraction</code>的值来提高CMS的触发百分比，降低内存回收频率，获取更好的性能。到了JDK 6时，CMS收集器的启动阈值就已经默认提升至92%。但这又会更容易面临另一种风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：冻结用户线程的执行，临时启用Serial Old收集器来重新进行老年代的垃圾收集，但这样停顿时间就很长了。所以参数<code>-XX：CMSInitiatingOccupancyFraction</code>设置得太高将会很容易导致大量的并发失败产生，性能反而降低，用户应在生产环境中根据实际应用情况来权衡设置。</p>
</blockquote>
<h3 id="7、G1垃圾收集器"><a href="#7、G1垃圾收集器" class="headerlink" title="7、G1垃圾收集器"></a>7、G1垃圾收集器</h3><p>G1 : Garbage First</p>
<blockquote>
<p>Garbage First（简称G1）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。</p>
<p>从JDK 6 Update 14开始就有Early Access版本的G1收集器供开发人员实验和试用，但由此开始G1收集器的“实验状态”（Experimental）持续了数年时间，直至JDK 7Update 4，Oracle才认为它达到足够成熟的商用程度，移除了“Experimental”的标识；到了JDK 8 Update 40的时候，G1提供并发的类卸载的支持，补全了其计划功能的最后一块拼图。这个版本以后的G1收集器才被Oracle官方称为“全功能的垃圾收集器”（Fully-FeaturedGarbage Collector）。</p>
<p>JDK9发布之日，G1宣告取代Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器。</p>
</blockquote>
<p>设计思路：</p>
<p>​    追求能够应付应用的内存分配速率（Allocation Rate），而不追求一次把整个Java堆全部清理干净。</p>
<blockquote>
<p>应用在分配，同时收集器在收集，只要收集的速度能跟得上对象分配的速度，那一切就能运作得很完美。这种新的收集器设计思路从工程实现上看是从G1开始兴起的。</p>
<p>G1是收集器技术发展的一个里程碑。也是jdk11的默认垃圾收集器。</p>
</blockquote>
<h4 id="特点：-6"><a href="#特点：-6" class="headerlink" title="特点："></a>特点：</h4><p>​    （1）面向服务端应用的垃圾收集器。</p>
<p>​    （2）基于Region的堆内存布局。</p>
<p>​    （3）使用Mixed GC模式，不再按“代”进行回收。（Region布局支持）</p>
<p>​    （4）遵循分代收集理论设计，新生代和老年代不再是固定大小与数理，只要求是逻辑连续的动态集合。</p>
<p>​    （5）回收策略是优先处理回收价值最大的Region</p>
<h4 id="内存布局图："><a href="#内存布局图：" class="headerlink" title="内存布局图："></a>内存布局图：</h4><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-G1.png" alt="G1收集器堆内存布局"></p>
<blockquote>
<p>G1不再是固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理。</p>
<p>Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。每个Region的大小可以通过参数<code>-XX：G1HeapRegionSize</code>设定，取值范围为1MB～32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的<code>Humongous Region</code>之中，G1的大多数行为都把<code>Humongous Region</code>作为老年代的一部分来进行看待</p>
</blockquote>
<h4 id="G1收集器实现思路："><a href="#G1收集器实现思路：" class="headerlink" title="G1收集器实现思路："></a>G1收集器实现思路：</h4><p>（1）基于Region的堆内存布局,把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理。</p>
<p>（2)将堆分成多个独立Region后，使用记忆集避免全堆作为GC Roots扫描，每个Region都维护有自己的记忆集，记忆集会记录下别的Region指向自己的指针，并标记这些指针分别在哪些卡页的范围之内。</p>
<blockquote>
<p>G1的记忆集在存储结构的本质上是一种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”）比原来的卡表实现起来更复杂，同时由于Region数量比传统收集器的分代数量明显要多得多，因此G1收集器要比其他的传统垃圾收集器有着更高的内存占用负担。G1至少要耗费大约相当于Java堆容量10%至20%的额外内存来维持收集器工作。</p>
</blockquote>
<p>（3）在并发标记阶段，通过原始快照（SATB）算法来实现用户线程改变对象引用关系时，不打破原本的对象图结构。</p>
<p>（4）在回收过程中新创建对象的内存分配上，程序要继续运行就肯定会持续有新对象被创建，G1为每一个Region设计了两个名为TAMS（Top at Mark Start）指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置上。G1收集器默认在这个地址以上的对象是被隐式标记过的，即默认它们是存活的，不纳入回收范围。</p>
<p>可预测的“停顿时间模型”（Pause Prediction Model）:</p>
<blockquote>
<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数<code>-XX：MaxGCPauseMillis</code>指定，默认值是200毫秒），优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。</p>
</blockquote>
<blockquote>
<p>G1收集器的停顿预测模型是以衰减均值（Decaying Average）为理论基础来实现的，在垃圾收集过程中，G1收集器会记录每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可测量的步骤花费的成本，并分析得出平均值、标准偏差、置信度等统计信息。这里强调的“衰减平均值”是指它会比普通的平均值更容易受到新数据的影响，平均值代表整体平均状态，但衰减平均值更准确地代表“最近的”平均状态。换句话说，Region的统计状态越新越能决定其回收的价值。然后通过这些信息预测现在开始回收的话，由哪些Region组成回收集才可以在不超过期望停顿时间的约束下获得最高的收益。</p>
</blockquote>
<p><code>-XX：MaxGCPauseMillis</code>-用户指定期望的停顿时间：</p>
<blockquote>
<p>用户指定期望的停顿时间是G1收集器很强大的一个功能，设置不同的期望停顿时间，可使得G1在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡。不过，这里设置的“期望值”必须是符合实际的，不能异想天开，毕竟G1是要冻结用户线程来复制对象的，这个停顿时间再怎么低也得有个限度。它默认的停顿目标为两百毫秒，一般来说，回收阶段占到几十到一百甚至接近两百毫秒都很正常，但如果我们把停顿时间调得非常低，譬如设置为二十毫秒，很可能出现的结果就是由于停顿目标时间太短，导致每次选出来的回收集只占堆内存很小的一部分，收集器收集的速度逐渐跟不上分配器分配的速度，导致垃圾慢慢堆积。很可能一开始收集器还能从空闲的堆内存中获得一些喘息的时间，但应用运行时间一长就不行了，最终占满堆引发Full GC反而降低性能，所以通常把望期停顿时间设置为一两百毫秒或者两三百毫秒会是比较合理的。</p>
</blockquote>
<h4 id="G1工作流程："><a href="#G1工作流程：" class="headerlink" title="G1工作流程："></a>G1工作流程：</h4><p>流程图如下：</p>
<p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-5-gc-G1-workflow.jpg" alt="G1收集器堆内存布局"></p>
<p>1、初始标记（Initial Marking）：<br>（A）只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。</p>
<p>（B）该阶段需要停顿线程，但耗时很短。</p>
<blockquote>
<p>初始标记是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</p>
</blockquote>
<p>2、并发标记（Concurrent Marking）：<br>（A）从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象。</p>
<p>（B）这阶段耗时较长，可与用户程序并发执行。</p>
<p>（C）当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。</p>
<p>3、最终标记（Final Marking）</p>
<p>（A）对用户线程做另一个短暂的暂停，处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。</p>
<p>4、筛选回收（Live Data Counting and Evacuation）</p>
<p>（A）负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。</p>
<p>（B）操作涉及存活对象的移动，必须暂停用户线程。</p>
<p>（C）筛选回收由多条收集器线程并行完成的。</p>
<h4 id="G1与CMS比较"><a href="#G1与CMS比较" class="headerlink" title="G1与CMS比较"></a>G1与CMS比较</h4><table>
<th><td width="50%">G1</td><td width="50%">CMS</td></th>
<tr><td rowspan="6">不同</td> <td>G1基于Region布局，实现分代。</td><td>CMS传统的分代布局。</td></tr>
<tr><td>G1可以设置最大停顿,关注点在吞吐量和延迟之间自行平衡或定制适应。</td><td>CMS以最小停顿为关注点。</td></tr>
<tr><td>G1按收益动态确定回收集。</td><td>CMS传统的按代回收。</td></tr>
<tr><td>G1整体基于“标记-整理”算法、局部（两个Region之间）基于“标记-复制”算法，运作期间不会产生内存空间碎片，利于程序长时间运行。</td><td>CMS基于“标记-清除”算法，产生空间碎片，导致Full GC ,用户线程挂起。</td></tr>
<tr><td>G1垃圾收集产生的内存占用（Footprint）和程序运行时的额外执行负载（Overload）。
    <br>【内存占用】：G1要维护堆中每个Region都有一份卡表。
    <br>【执行负载】：G1使用写前屏障来跟踪并发时的指针变化情况,实现原始快照搜索（SATB）算法;使用写后屏障来来更新维护结构更复杂的卡表，类似于消息队列的结构，是异步操作。</td><td>CMS的内存占用（Footprint）和执行负载（Overload）相对低些。
        <br>【内存占用】：CMS只维护新生代与老年代之间唯一的一份卡表。
        <br>【执行负载】：CMS用写后屏障来更新维护卡表，是同步操作。
<tr><td>G1相对适合大内存应用。</td><td>CMS相对适合小内存应用。临界（6G~8G）</td></tr>
<tr><td>相同</td> <td colspan="2">（1）都非常关注停顿时间的控制。<br>（2）都使用传统的分代理论。<br>（3）都使用卡表来处理跨代指针问题。</td></tr>
</table>




<h2 id="三-低延迟垃圾收集器"><a href="#三-低延迟垃圾收集器" class="headerlink" title="三 低延迟垃圾收集器"></a>三 低延迟垃圾收集器</h2><p><img src="/medias/loading-animated.gif" data-original="/images/jvm-images/jvm-gc-LLGC.jpg" alt="各款收集器的并发情况"></p>
<p>其中 <strong>Shenandoah</strong> 和 <strong>ZGC</strong> ，这两款目前仍处于实验状态的收集器，被官方命名为“低延迟垃圾收集器”（Low-Latency Garbage Collector或者Low-Pause-Time GarbageCollector）。</p>
<h3 id="1、Shenandoah收集器"><a href="#1、Shenandoah收集器" class="headerlink" title="1、Shenandoah收集器"></a>1、Shenandoah收集器</h3><h4 id="主要目标："><a href="#主要目标：" class="headerlink" title="主要目标："></a>主要目标：</h4><blockquote>
<p>实现一种能在任何堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的垃圾收集器。</p>
</blockquote>
<p>特点：</p>
<p>（1）基于Region的堆内存布局</p>
<p>（2）回收策略优先处理回收价值最大的Region</p>
<p>（3）支持并发的整理算法。</p>
<h4 id="三个重要的并发阶段："><a href="#三个重要的并发阶段：" class="headerlink" title="三个重要的并发阶段："></a>三个重要的并发阶段：</h4><p>并发标记、并发回收、并发引用更新。</p>
<p>具体更详细的学习笔记：<a href="f8161112.html">《jvm垃圾收集器Shenandoah》</a></p>
<h3 id="2、ZGC收集器"><a href="#2、ZGC收集器" class="headerlink" title="2、ZGC收集器"></a>2、<code>ZGC</code>收集器</h3><h4 id="主要目标：-1"><a href="#主要目标：-1" class="headerlink" title="主要目标："></a>主要目标：</h4><blockquote>
<p>尽可能对吞吐量影响不太大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在十毫秒以内的低延迟。</p>
</blockquote>
<h4 id="ZGC主要特征："><a href="#ZGC主要特征：" class="headerlink" title="ZGC主要特征："></a>ZGC主要特征：</h4><p>（1）以低延迟为首要目标。</p>
<p>（2）暂不支持分代的。</p>
<p>（3）基于Region的堆内存布局。</p>
<p>（4）染色指针实现并发整理算法。Colored Pointer。</p>
<p>（5）内存多重映射技术。</p>
<p>（6）支持“NUMA-Aware”的内存分配。(NUMA非统一内存访问架构)</p>
<p>具体更详细的学习笔记：<a href="e3d9aed7.html">《jvm垃圾收集器ZGC》</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（三）——主题更换</title>
    <url>/posts/a5bf7e18.html</url>
    <content><![CDATA[<p>Hexo静态博客已经搭建好了，链接页面有了，主题不好看怎么换呢？本文记录主题更换相关内容。</p>
 <a id="more"></a>

<p>选择一个自己喜欢的 Hexo 主题站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a><br>极简主题推荐：<br><a href="https://github.com/zhzy2017/hexo-theme-polarbear.git" target="_blank" rel="noopener">hexo-theme-polarbear</a><br><a href="https://github.com/zhzy2017/gd4Ark.github.io.git" target="_blank" rel="noopener">hexo-theme-polarbear  （gd4Ark的扩展版）</a> （下载后执行安装npm install）<br><a href="https://github.com/zhzy2017/hexo-theme-sky.git" target="_blank" rel="noopener">hexo-theme-sky</a><br><a href="https://github.com/zhzy2017/hexo-theme-xoxo.git" target="_blank" rel="noopener">hexo-theme-xoxo</a><br><a href="https://github.com/zhzy2017/hexo-theme-xoxo-plus.git" target="_blank" rel="noopener">hexo-theme-xoxo-plus</a><br>漂亮主题推荐：<br>[hexo-theme-matery]（<a href="https://github.com/blinkfox/hexo-theme-matery）" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery）</a><br>[hexo-theme-ayer]（<a href="https://github.com/Shen-Yu/hexo-theme-ayer）" target="_blank" rel="noopener">https://github.com/Shen-Yu/hexo-theme-ayer）</a></p>
<p>其中极简主题有些没有search功能，如需要自己安装search插件，参考Hexo搭建静态博客（四）——插件安装<br>极简主题我比较喜欢hexo-theme-polarbear，对扩展版进行补充搜索功能。</p>
<p>如安装主题hexo-theme-xoxo-plus。</p>
<h4 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1.下载主题"></a>1.下载主题</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> themes
<span class="token function">git</span> clone https://github.com/zhzy2017/hexo-theme-xoxo-plus.git</code></pre>
<h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h4><p>修改全局配置根目录_config.yml, 注意theme的值要和theme目录的主题的文件夹名字一致</p>
<pre><code># Extensions
## Plugins: https://hexo.io/plugins/
## Themes: https://hexo.io/themes/
# landscape
theme: hexo-theme-xoxo-plus</code></pre><h4 id="3-启动预览"><a href="#3-启动预览" class="headerlink" title="3.启动预览"></a>3.启动预览</h4><pre class=" language-bash"><code class="language-bash">hexo g <span class="token operator">&amp;</span> hexo s</code></pre>
<p>浏览器访问：<br>大功告成。</p>
<p>如果对该主题的其他设置请参考主题用法，到主题目录下修改主题的配置文件_config.yml</p>
<p>如有问题请参考本系列：<a href="/post/ce4a93ff.html">Hexo搭建静态博客（五）——踩坑问题</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（五）——踩坑问题</title>
    <url>/posts/ce4a93ff.html</url>
    <content><![CDATA[<p> 本文记录捣鼓hexo博客时遇到的一些踩坑的记录及相关解决思路。</p>
<a id="more"></a>

<p>常见报错多在 <code>hexo g</code> 的时候报错</p>
<h5 id="1-YAMLException"><a href="#1-YAMLException" class="headerlink" title="1. YAMLException"></a>1. YAMLException</h5><pre><code>ERROR Process failed: _posts/hexo-problem.md
YAMLException: end of the stream or a document separator is expected at line x, column y:
at ...</code></pre><p>解决思路：<br>A. 一般是因为缺少分隔符，缺少空格，<code>key: value</code> ，英文冒号后面留空格，一般错会提示哪个文件的第几行第几列。<br>B.其次是头部yaml配置</p>
<pre><code>---
key: value
---</code></pre><p>缺少也会导致文章内容报错，具体报错的行列位置如果没有问题，就检查头部或者附件标点，或分段测试，该方案适合文章报错<br>C.还有一些特殊字符，如<code>[ ]</code>也会导致报错，我在title中使用英文<code>[ ]</code>也会报错，但提示的位置没有问题，注意特殊字符使用</p>
<h5 id="2-某个ejs或swig文件报错"><a href="#2-某个ejs或swig文件报错" class="headerlink" title="2.  某个ejs或swig文件报错"></a>2.  某个ejs或swig文件报错</h5><p>（1）此类问题一般是使用某个主题之后会出现，注意主题下的配置文件_config.yml检查是否配置，参考（一）A的思路<br>（2）缺少相关插件如xoxo主题生成时就有readingTime的报错，安装了hexo-reading-time的插件后解决，如是其他同理网上搜一下</p>
<pre><code>npm install   hexo-reading-time --save</code></pre><p>(3)使用主题的时候注意先阅读相关使用文档，有些主题需要一些插件</p>
<h5 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h5><p>后续补充</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建静态博客（六）——项目部署</title>
    <url>/posts/c68d7a69.html</url>
    <content><![CDATA[<p>本文记录将hexo博客部署到github、云服务器上的相关操作操作。</p>
<a id="more"></a>

<h4 id="关于部署"><a href="#关于部署" class="headerlink" title="关于部署"></a>关于部署</h4><p>常见部署在github上，如果有自己独立的服务器也可以部署在服务上，此处用的腾讯云服务器。</p>
<h3 id="一-Github上部署"><a href="#一-Github上部署" class="headerlink" title="一  Github上部署"></a>一  Github上部署</h3><h4 id="1-准备环境："><a href="#1-准备环境：" class="headerlink" title="1 准备环境："></a>1 准备环境：</h4><p>​    有github账户</p>
<p>​    在账户里创建仓库, New repository，仓库名固定格式： <code>你的github账户名.github.io</code></p>
<p>​    git免密登陆（可选，非必须）</p>
<h4 id="2-安装部署插件"><a href="#2-安装部署插件" class="headerlink" title="2  安装部署插件"></a>2  安装部署插件</h4><p>​    安装部署插件deploy-git </p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre>
<h4 id="3-Hexo修改根目录配置文件"><a href="#3-Hexo修改根目录配置文件" class="headerlink" title="3  Hexo修改根目录配置文件"></a>3  Hexo修改根目录配置文件</h4><pre class=" language-yml"><code class="language-yml">deploy:
  type: git
  repo: https://github.com/your_github_name/your_github_name.github.io.git
  branch: master</code></pre>
<p>如果配置了免密登录: </p>
<pre><code>git@github.com:yourgithubName/your_github_name.github.io.git</code></pre><p>没有配置请使用：</p>
<pre><code>https://github.com/your_github_name/your_github_name.github.io.git</code></pre><p><code>https</code>开头每次要输入密码，<code>git</code>开头表示是用ssh方式连接。</p>
<h4 id="4-生成并部署"><a href="#4-生成并部署" class="headerlink" title="4  生成并部署"></a>4  生成并部署</h4><pre class=" language-bash"><code class="language-bash">hexo g <span class="token operator">&amp;</span> hexo d</code></pre>
<p>如果没有配置免密登陆，部署的时候可能会用到git的用户名和密码。</p>
<h4 id="5-访问验证"><a href="#5-访问验证" class="headerlink" title="5  访问验证"></a>5  访问验证</h4><p>打开浏览器访问：<a href="https://YourgithubName.github.io" target="_blank" rel="noopener">https://YourgithubName.github.io</a></p>
<p>如我<code>github</code>博客地址：<a href="https://small-rose.github.io">https://small-rose.github.io</a></p>
<h3 id="二-云服务器部署"><a href="#二-云服务器部署" class="headerlink" title="二  云服务器部署"></a>二  云服务器部署</h3><p>部署到云服务有两种方式，一种是利用git仓库配合hooks自动部署更新，另一种是插件的方式，插件的话可以参考如下：</p>
<table>
<thead>
<tr>
<th>插件安装命令</th>
<th>功能</th>
<th>文档</th>
</tr>
</thead>
<tbody><tr>
<td>npm install hexo-deployer-cos –save</td>
<td>hexo上传至腾讯云COS</td>
<td><a href="https://github.com/sdlzhd/hexo-deployer-cos#user-content-options" target="_blank" rel="noopener">https://github.com/sdlzhd/hexo-deployer-cos#user-content-options</a></td>
</tr>
<tr>
<td>npm install hexo-deployer-aliyun –save</td>
<td>hexo上传至阿里云</td>
<td><a href="https://github.com/yedaodao/hexo-deployer-aliyun" target="_blank" rel="noopener">https://github.com/yedaodao/hexo-deployer-aliyun</a></td>
</tr>
</tbody></table>
<h4 id="1-准备环境：-1"><a href="#1-准备环境：-1" class="headerlink" title="1  准备环境："></a>1  准备环境：</h4><p>​    有一台云服务器，本文是腾讯云服务器</p>
<p>​    准备工作大概如下</p>
<pre class=" language-html"><code class="language-html">（1）服务器安装git服务并创建仓库

（2）配置hooks

（3）安装及配置Nginx</code></pre>
<h4 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2  安装git"></a>2  安装git</h4><p>安装命令：</p>
<pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> <span class="token function">git</span> </code></pre>
<p>如果你的服务器不能直接yum安装，可以参考    git安装教程：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span>  /usr/local/src   <span class="token comment" spellcheck="true">#进入你的下载目录           </span>
<span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.24.0.tar.gz    <span class="token comment" spellcheck="true">#下载，不能下载就自己上传一下</span>
<span class="token function">tar</span> -zvxf git-2.24.0.tar.gz    <span class="token comment" spellcheck="true">#解压</span>
<span class="token function">cd</span> git-2.24.0                
<span class="token function">make</span> all prefix<span class="token operator">=</span>/usr/local/git    <span class="token comment" spellcheck="true">#编译</span>
<span class="token function">make</span> <span class="token function">install</span> prefix<span class="token operator">=</span>/usr/local/git    <span class="token comment" spellcheck="true">#安装git到指定目录</span>
<span class="token keyword">echo</span> <span class="token string">'export PATH=<span class="token variable">$PATH</span>:/usr/local/git/bin'</span> <span class="token operator">>></span> /etc/bashrc  <span class="token comment" spellcheck="true">#配置环境变量</span>
<span class="token function">source</span> /etc/bashrc       <span class="token comment" spellcheck="true">#刷新环境变量</span></code></pre>
<p>验证Git是否安装成功：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre>
<p>添加git用户并授权：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">useradd</span> -r -s /bin/bash -c <span class="token string">'git version control'</span> -d /home/git <span class="token function">git</span> 
<span class="token function">passwd</span> <span class="token function">git</span> 
<span class="token function">mkdir</span> -p /home/git  
<span class="token function">chown</span> git:git /home/git </code></pre>
<p>创建仓库：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/git/
<span class="token function">git</span> init --bare myHexoBlog.git</code></pre>
<p>如果要配置SSH免登录：</p>
<p>a.客户端生成密钥</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"这里换上你的邮箱"</span></code></pre>
<p>然后会出现询问，大概意思如下：</p>
<pre><code>1. 确认秘钥的保存路径（如果不需要改路径则直接回车）；
2. 如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；
3. 创建密码（如果不需要密码则直接回车）；
4. 确认密码；</code></pre><p>要免密登录请输密码的时候回车即可。根据提示找到密钥所在文件：</p>
<pre><code>id_rsa  #私钥
id_rsa.pub  #公钥</code></pre><p>b.服务端导入客户端公钥</p>
<p>在/home/git下已经创建.ssh目录，然后创建authorized_keys文件，并将客户端生成的公钥导入进去。</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/git/
<span class="token function">mkdir</span> .ssh
<span class="token function">chmod</span> 755 .ssh
<span class="token function">touch</span> .ssh/authorized_keys
<span class="token function">chmod</span> 644 .ssh/authorized_keys</code></pre>
<p>将 <code>id_rsa.pub</code> 文件的内容写入<code>authorized_keys</code></p>
<p>c. 服务端SSH将RSA认证打开</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/ssh/sshd_config</code></pre>
<p>其中三个地方的设置要确认如下：</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys</code></pre><p>git用户不允许登录shell</p>
<pre class=" language-bash"><code class="language-bash">vim /etc/passwd</code></pre>
<p>将</p>
<pre><code>git:x:502:502::/home/git:/bin/bash</code></pre><p> 改为</p>
<pre><code>git:x:502:502::/home/git:/usr/local/git/bin/git-shell</code></pre><h4 id="3-配置hooks自动部署"><a href="#3-配置hooks自动部署" class="headerlink" title="3 配置hooks自动部署"></a>3 配置hooks自动部署</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/hexoBlog
<span class="token function">chown</span> git:git /home/hexoBlog 

<span class="token function">cd</span> /home/hexoBlog
<span class="token function">cd</span> /home/git/myHexoBlog.git/hooks
vim  post-receive  <span class="token comment" spellcheck="true">#创建hooks执行文件</span></code></pre>
<p>配置hooks，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</p>
<pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/hexoBlog --git-dir<span class="token operator">=</span>/home/git/myHexoBlog.git checkout -f</code></pre>
<p>如果是使用Apache服务,可以直接把work-tree目录指向/var/www/html</p>
<h4 id="4-安装Nginx服务"><a href="#4-安装Nginx服务" class="headerlink" title="4 安装Nginx服务"></a>4 安装Nginx服务</h4><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y nginx</code></pre>
<p>如果你不能直接安装，请先配置安装源</p>
<pre class=" language-bahs"><code class="language-bahs">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre>
<p>启动Nginx</p>
<pre class=" language-bash"><code class="language-bash">systemctl start nginx.service</code></pre>
<p>浏览器输入你的域名或者IP，出现欢迎页面代表安装启动成功。</p>
<p>修改配置：</p>
<pre class=" language-bash"><code class="language-bash">nginx -t  <span class="token comment" spellcheck="true">#查看nginx安装路径 配置文件路径</span>
vim /etc/nginx/nginx.conf</code></pre>
<p>找到server部分</p>
<pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /home/hexoBlog;    #需要修改

    server_name www.zhangxiaocai.cn; #需要修改

    include /etc/nginx/default.d/*.conf;
    location / {
    }
    error_page 404 /404.html;
        location = /40x.html {
    }
}</code></pre><p>修改好之后<code>ESC</code> 输入<code>:wq</code>保存退出。接下来验证配置</p>
<pre class=" language-bash"><code class="language-bash">nginx -t</code></pre>
<p>如果出现以下内容代表配置成功：</p>
<pre class=" language-bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is ok
nginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token function">test</span> is successful</code></pre>
<p>重新加载配置或重启nginx服务</p>
<pre class=" language-bash"><code class="language-bash">nginx -s reload</code></pre>
<p>更多<code>Nginx</code>相关内容，访问<code>Nginx</code></p>
<h4 id="5-本地配置修改"><a href="#5-本地配置修改" class="headerlink" title="5 本地配置修改"></a>5 本地配置修改</h4><p>修改项目根目录的配置文件</p>
<pre><code>deploy:
    type: git
    repo: git@你的云服务器的IP地址:/home/git/myHexoBlog.git
    branch: master</code></pre><p>清理-生成-部署</p>
<pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;</span> hexo g <span class="token operator">&amp;</span> hexo d</code></pre>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
